{"ast":null,"code":"var _jsxFileName = \"/Users/dylan/projects/terras/frontend/pages/section/[slug].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../../components/layout';\nimport Navbar from \"../../components/base/Navbar\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from 'graphql-tag';\nimport CategoryHead from \"../../components/section/CategoryHead\";\nimport styled from 'styled-components';\nconst Title = styled.h2`\nfont-family: Cormorant;\nfont-style: normal;\nfont-weight: bold;\nfont-size: 28px;\nline-height: 34px;\ncolor: #000000;\n\n`;\n\nconst Section = ({\n  slug\n}) => {\n  let categoryTitle = slug.replace(/-/g, ' ');\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(CategoryDocument, {\n    variables: {\n      category: categoryTitle\n    }\n  });\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Loading Post...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Something wrong happened!\");\n  let articles = data.posts.nodes;\n  return __jsx(React.Fragment, null, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }), __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(CategoryHead, {\n    category: categoryTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, categoryTitle), articles.map(article => __jsx(React.Fragment, null, __jsx(CategoryTitle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, article.title), __jsx(React.Fragment, null, article.excerpt), __jsx(React.Fragment, null, article.date)))));\n};\n\nconst CategoryDocument = gql`\nquery CategoryPage($category: String) {\n  posts(where:{categoryName: $category}){\n    nodes{\n      title\n      excerpt\n      date\n      coAuthors{\n        display_name\n        slug\n        job_title\n      }\n      issues{\n        nodes{\n          name\n        }\n      }\n    }\n  }\n}\n\n`;\n\nSection.getInitialProps = async ({\n  query\n}) => {\n  return {\n    slug: query.slug\n  };\n};\n\nexport default Section;","map":{"version":3,"sources":["/Users/dylan/projects/terras/frontend/pages/section/[slug].tsx"],"names":["Layout","Navbar","useQuery","gql","CategoryHead","styled","Title","h2","Section","slug","categoryTitle","replace","loading","error","data","CategoryDocument","variables","category","articles","posts","nodes","map","article","title","excerpt","date","getInitialProps","query"],"mappings":";;;AACA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAGA,MAAMC,KAAK,GAAGD,MAAM,CAACE,EAAG;;;;;;;;CAAxB;;AASA,MAAMC,OAAO,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAC1B,MAAIC,aAAa,GAAGD,IAAI,CAACE,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAApB;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BZ,QAAQ,CAACa,gBAAD,EAAmB;AAC1DC,IAAAA,SAAS,EAAE;AAACC,MAAAA,QAAQ,EAAEP;AAAX;AAD+C,GAAnB,CAAzC;AAGA,MAAIE,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACX,MAAIK,QAAQ,GAAGJ,IAAI,CAACK,KAAL,CAAWC,KAA1B;AACE,SAAQ,4BACR,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADQ,EAER,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAEV,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,aAAJ,CAFF,EAGGQ,QAAQ,CAACG,GAAT,CAAcC,OAAD,IAAc,4BAC1B,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgBA,OAAO,CAACC,KAAxB,CAD0B,EAE1B,4BAAGD,OAAO,CAACE,OAAX,CAF0B,EAG1B,4BAAGF,OAAO,CAACG,IAAX,CAH0B,CAA3B,CAHH,CAFQ,CAAR;AAaH,CArBD;;AAuBA,MAAMV,gBAAgB,GAAGZ,GAAI;;;;;;;;;;;;;;;;;;;;;CAA7B;;AAuBAK,OAAO,CAACkB,eAAR,GAA0B,OAAO;AAAEC,EAAAA;AAAF,CAAP,KAAqB;AAC7C,SAAO;AAAElB,IAAAA,IAAI,EAAEkB,KAAK,CAAClB;AAAd,GAAP;AACD,CAFD;;AAIA,eAAeD,OAAf","sourcesContent":["import { NextPage } from 'next';\nimport Layout from '../../components/layout'\nimport Navbar from \"../../components/base/Navbar\"\nimport {useQuery} from \"@apollo/react-hooks\"\nimport gql from 'graphql-tag';\nimport CategoryHead from \"../../components/section/CategoryHead\"\nimport styled from 'styled-components'\n\n\nconst Title = styled.h2`\nfont-family: Cormorant;\nfont-style: normal;\nfont-weight: bold;\nfont-size: 28px;\nline-height: 34px;\ncolor: #000000;\n\n`\nconst Section = ({slug}) => {\n  let categoryTitle = slug.replace(/-/g, ' ');\n  const { loading, error, data } = useQuery(CategoryDocument, {\n    variables: {category: categoryTitle}\n  })\n  if (loading) return <p>Loading Post...</p>;\n  if (error) return <p>Something wrong happened!</p>;\n  let articles = data.posts.nodes\n    return (<>\n    <Navbar /> \n    <Layout>\n      <CategoryHead category={categoryTitle} />\n      <p>{categoryTitle}</p>\n      {articles.map((article) => (<>\n        <CategoryTitle>{article.title}</CategoryTitle>\n        <>{article.excerpt}</>\n        <>{article.date}</>\n        \n      </>))}\n    </Layout>\n    </>)\n}\n\nconst CategoryDocument = gql`\nquery CategoryPage($category: String) {\n  posts(where:{categoryName: $category}){\n    nodes{\n      title\n      excerpt\n      date\n      coAuthors{\n        display_name\n        slug\n        job_title\n      }\n      issues{\n        nodes{\n          name\n        }\n      }\n    }\n  }\n}\n\n`\n\nSection.getInitialProps = async ({ query }) => {\n  return { slug: query.slug }\n}\n\nexport default Section"]},"metadata":{},"sourceType":"module"}