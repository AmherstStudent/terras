{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  grid-column: span 4;\\n  @media (max-width: 968px) {\\n    grid-column: 1/ -1;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  grid-column: span 4;\\n  @media (max-width: 968px) {\\n    grid-column: 1/ -1;\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  grid-column: span 8;\\n  @media (max-width: 968px) {\\n    grid-column: 1/ -1;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport styled from 'styled-components';\nimport { NewBlock } from '../article/RenderBlocks';\nvar MainRightSection = styled.div(_templateObject());\nvar SideLeftSection = styled.div(_templateObject2());\nvar ThirdsSection = styled.div(_templateObject3()); // So what we want to do is .map over each ColumnsComponent\n// if core/columns.innerBlocks = 3 -\n// return <ThirdsSection> <p> </ThirdSection>\n// if 2\n/// ADDD ERROR MESSAGE!\n\nvar InnerColumn = function InnerColumn(_ref) {\n  var size = _ref.size,\n      block = _ref.block;\n  console.log(block.__typename);\n\n  switch (size) {\n    case 66.66:\n      return __jsx(MainRightSection, null, __jsx(NewBlock, block));\n      break;\n\n    case 33.33:\n      return __jsx(SideLeftSection, null, __jsx(NewBlock, block));\n      break;\n\n    default:\n      return __jsx(ThirdsSection, null, __jsx(NewBlock, block));\n  }\n};\n\nvar Row = function Row(_ref2) {\n  var column = _ref2.column;\n  return column === null || column === void 0 ? void 0 : column.innerBlocks.map(function (row, i) {\n    return __jsx(InnerColumn, {\n      key: i,\n      size: row.attributes.width,\n      block: row.innerBlocks && row.innerBlocks[0]\n    });\n  });\n};\n\nvar Columns = function Columns(_ref3) {\n  var columns = _ref3.columns;\n\n  if ((columns === null || columns === void 0 ? void 0 : columns.length) > 1) {\n    return columns === null || columns === void 0 ? void 0 : columns.map(function (col, i) {\n      return __jsx(Row, {\n        key: i,\n        column: col\n      });\n    });\n  } else {\n    return null;\n  }\n};\n\nexport default Columns;","map":null,"metadata":{},"sourceType":"module"}