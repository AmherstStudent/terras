{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/dylan/projects/terras/frontend/pages/section/[slug].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\nquery CategoryPage($category: String) {\\n  posts(where:{categoryName: $category}){\\n    nodes{\\n      title\\n      excerpt\\n      date\\n      coAuthors{\\n        display_name\\n        slug\\n        job_title\\n      }\\n      issues{\\n        nodes{\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\nfont-family: Halyard Text;\\nfont-style: italic;\\nfont-weight: 300;\\nfont-size: 16px;\\nline-height: 23px;\\ncolor: #000000;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nfont-family: Cormorant;\\nfont-style: normal;\\nfont-weight: bold;\\nfont-size: 28px;\\nline-height: 34px;\\ncolor: #000000;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Layout from '../../components/layout';\nimport Navbar from \"../../components/base/Navbar\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from 'graphql-tag';\nimport CategoryHead from \"../../components/section/CategoryHead\";\nimport styled from 'styled-components';\nimport { AuthorNames } from \"../../components/util\";\nvar Title = styled.h2(_templateObject());\nvar SubText = styled.p(_templateObject2());\n\nvar Section = function Section(_ref) {\n  var slug = _ref.slug;\n  var categoryTitle = slug.replace(/-/g, ' ');\n\n  var _useQuery = useQuery(CategoryDocument, {\n    variables: {\n      category: categoryTitle\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  if (loading) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Loading Post...\");\n  if (error) return __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Something wrong happened!\");\n  var articles = data.posts.nodes;\n  return __jsx(React.Fragment, null, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }), __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, __jsx(CategoryHead, {\n    category: categoryTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, categoryTitle), articles.map(function (article) {\n    return __jsx(React.Fragment, null, __jsx(Title, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, article.title), __jsx(AuthorNames, {\n      authors: article.coAuthors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }), __jsx(SubText, {\n      dangerouslySetInnerHTML: {\n        __html: article.excerpt\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), __jsx(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }));\n  })));\n};\n\nvar CategoryDocument = gql(_templateObject3());\n\nSection.getInitialProps = function _callee(_ref2) {\n  var query;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          query = _ref2.query;\n          return _context.abrupt(\"return\", {\n            slug: query.slug\n          });\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Section;","map":{"version":3,"sources":["/Users/dylan/projects/terras/frontend/pages/section/[slug].tsx"],"names":["Layout","Navbar","useQuery","gql","CategoryHead","styled","AuthorNames","Title","h2","SubText","p","Section","slug","categoryTitle","replace","CategoryDocument","variables","category","loading","error","data","articles","posts","nodes","map","article","title","coAuthors","__html","excerpt","getInitialProps","query"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAOA,MAAP,MAAmB,yBAAnB;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,SAAQC,QAAR,QAAuB,qBAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,OAAOC,YAAP,MAAyB,uCAAzB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAAQC,WAAR,QAA0B,uBAA1B;AAEA,IAAMC,KAAK,GAAGF,MAAM,CAACG,EAAV,mBAAX;AAQA,IAAMC,OAAO,GAAGJ,MAAM,CAACK,CAAV,oBAAb;;AAQA,IAAMC,OAAO,GAAG,SAAVA,OAAU,OAAY;AAAA,MAAVC,IAAU,QAAVA,IAAU;AAC1B,MAAIC,aAAa,GAAGD,IAAI,CAACE,OAAL,CAAa,IAAb,EAAmB,GAAnB,CAApB;;AAD0B,kBAEOZ,QAAQ,CAACa,gBAAD,EAAmB;AAC1DC,IAAAA,SAAS,EAAE;AAACC,MAAAA,QAAQ,EAAEJ;AAAX;AAD+C,GAAnB,CAFf;AAAA,MAElBK,OAFkB,aAElBA,OAFkB;AAAA,MAETC,KAFS,aAETA,KAFS;AAAA,MAEFC,IAFE,aAEFA,IAFE;;AAK1B,MAAIF,OAAJ,EAAa,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAP;AACb,MAAIC,KAAJ,EAAW,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAP;AACX,MAAIE,QAAQ,GAAGD,IAAI,CAACE,KAAL,CAAWC,KAA1B;AACE,SAAQ,4BACR,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADQ,EAER,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,QAAQ,EAAEV,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAIA,aAAJ,CAFF,EAGGQ,QAAQ,CAACG,GAAT,CAAa,UAACC,OAAD;AAAA,WAAc,4BAC1B,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAQA,OAAO,CAACC,KAAhB,CAD0B,EAE1B,MAAC,WAAD;AAAa,MAAA,OAAO,EAAED,OAAO,CAACE,SAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAF0B,EAG1B,MAAC,OAAD;AAAS,MAAA,uBAAuB,EAAE;AAACC,QAAAA,MAAM,EAAEH,OAAO,CAACI;AAAjB,OAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAH0B,EAI1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJ0B,CAAd;AAAA,GAAb,CAHH,CAFQ,CAAR;AAcH,CAtBD;;AAwBA,IAAMd,gBAAgB,GAAGZ,GAAH,oBAAtB;;AAuBAQ,OAAO,CAACmB,eAAR,GAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,UAAAA,KAAT,SAASA,KAAT;AAAA,2CACjB;AAAEnB,YAAAA,IAAI,EAAEmB,KAAK,CAACnB;AAAd,WADiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAA1B;;AAIA,eAAeD,OAAf","sourcesContent":["import { NextPage } from 'next';\nimport Layout from '../../components/layout'\nimport Navbar from \"../../components/base/Navbar\"\nimport {useQuery} from \"@apollo/react-hooks\"\nimport gql from 'graphql-tag';\nimport CategoryHead from \"../../components/section/CategoryHead\"\nimport styled from 'styled-components'\nimport {AuthorNames} from \"../../components/util\"\n\nconst Title = styled.h2`\nfont-family: Cormorant;\nfont-style: normal;\nfont-weight: bold;\nfont-size: 28px;\nline-height: 34px;\ncolor: #000000;\n`\nconst SubText = styled.p`\nfont-family: Halyard Text;\nfont-style: italic;\nfont-weight: 300;\nfont-size: 16px;\nline-height: 23px;\ncolor: #000000;\n`\nconst Section = ({slug}) => {\n  let categoryTitle = slug.replace(/-/g, ' ');\n  const { loading, error, data } = useQuery(CategoryDocument, {\n    variables: {category: categoryTitle}\n  })\n  if (loading) return <p>Loading Post...</p>;\n  if (error) return <p>Something wrong happened!</p>;\n  let articles = data.posts.nodes\n    return (<>\n    <Navbar /> \n    <Layout>\n      <CategoryHead category={categoryTitle} />\n      <p>{categoryTitle}</p>\n      {articles.map((article) => (<>\n        <Title>{article.title}</Title>\n        <AuthorNames authors={article.coAuthors} />\n        <SubText dangerouslySetInnerHTML={{__html: article.excerpt}}/>\n        <hr />\n        \n      </>))}\n    </Layout>\n    </>)\n}\n\nconst CategoryDocument = gql`\nquery CategoryPage($category: String) {\n  posts(where:{categoryName: $category}){\n    nodes{\n      title\n      excerpt\n      date\n      coAuthors{\n        display_name\n        slug\n        job_title\n      }\n      issues{\n        nodes{\n          name\n        }\n      }\n    }\n  }\n}\n\n`\n\nSection.getInitialProps = async ({ query }) => {\n  return { slug: query.slug }\n}\n\nexport default Section"]},"metadata":{},"sourceType":"module"}