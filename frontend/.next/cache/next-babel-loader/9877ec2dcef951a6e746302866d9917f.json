{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n  height: 100%;\\n\"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n  font-family: Halyard Text;\\n  font-style: italic;\\n  font-weight: 300;\\n  font-size: 12px;\\n  line-height: 150%;\\n  color: #595959;\\n  margin: 5px 0;\\n\"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n  font-family: Cormorant;\\n  font-style: normal;\\n  font-weight: bold;\\n  font-size: 21px;\\n  line-height: 25px;\\n  margin: 0;\\n\\n  & > a {\\n    text-decoration: none;\\n    color: #000000;\\n  }\\n\"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n  font-family: Halyard Text;\\n  font-style: normal;\\n  font-weight: bold;\\n  font-size: 12px;\\n  line-height: 17px;\\n  letter-spacing: 0.05em;\\n  text-transform: uppercase;\\n  & > a {\\n    text-decoration: none;\\n    color: #3f1f69;\\n  }\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n  border-bottom: 0.5px rgba(0, 0, 0, 0.5) solid;\\n  padding: 10px 0;\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  query Tags {\\n    tag(id: \\\"cG9zdF90YWc6NQ==\\\") {\\n      name\\n      posts(where: { orderby: { field: DATE, order: DESC } }) {\\n        nodes {\\n          id\\n          title\\n          slug\\n          date\\n          categories {\\n            nodes {\\n              name\\n              slug\\n            }\\n          }\\n          coAuthors {\\n            display_name\\n            id\\n            job_title\\n          }\\n        }\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport styled from 'styled-components';\nimport Link from 'next/link';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/react-hooks';\nimport { formatDate, AuthorNames } from '../util';\nvar TagsQuery = gql(_templateObject());\nvar PostWrapper = styled.div(_templateObject2());\nvar Category = styled.a(_templateObject3());\nvar Title = styled.h3(_templateObject4());\nvar Tagline = styled.p(_templateObject5()); /// STEAL FROM TAGS PAGE\n\nvar Post = function Post(_ref) {\n  var date = _ref.date,\n      title = _ref.title,\n      authors = _ref.authors,\n      category = _ref.category,\n      id = _ref.id,\n      slug = _ref.slug;\n  var titles = authors.length > 1 ? authors === null || authors === void 0 ? void 0 : authors.map(function (author) {\n    return author.job_title;\n  }).join(' & ') : authors[0].job_title;\n  return __jsx(PostWrapper, null, __jsx(Category, null, __jsx(Link, {\n    key: id,\n    href: {\n      pathname: '/section',\n      query: {\n        slug: category\n      }\n    },\n    passHref: true\n  }, __jsx(\"a\", null, category))), __jsx(Title, null, __jsx(Link, {\n    key: id,\n    href: {\n      pathname: '/article',\n      query: {\n        slug: slug\n      }\n    },\n    passHref: true\n  }, __jsx(\"a\", null, title))), __jsx(Tagline, null, \"by \", __jsx(AuthorNames, {\n    authors: authors\n  }), titles, \" || \", __jsx(\"time\", null, formatDate(date))));\n};\n\nvar PostlistWrapper = styled.div(_templateObject6());\n\nvar Postlist = function Postlist() {\n  var _data$tag, _data$tag$posts;\n\n  var _useQuery = useQuery(TagsQuery),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data;\n\n  var articles = data === null || data === void 0 ? void 0 : (_data$tag = data.tag) === null || _data$tag === void 0 ? void 0 : (_data$tag$posts = _data$tag.posts) === null || _data$tag$posts === void 0 ? void 0 : _data$tag$posts.nodes;\n  return __jsx(PostlistWrapper, null, articles === null || articles === void 0 ? void 0 : articles.map(function (article) {\n    return __jsx(Post, {\n      date: article.date,\n      title: article.title,\n      authors: article.coAuthors,\n      category: article.categories.nodes[0].name,\n      id: article.id,\n      slug: article.slug\n    });\n  }));\n};\n\nexport default Postlist;","map":null,"metadata":{},"sourceType":"module"}