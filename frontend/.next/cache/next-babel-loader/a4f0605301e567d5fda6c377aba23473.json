{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../../components/layout\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport gql from 'graphql-tag';\nimport FeaturedImage from '../../components/article/FeaturedImage';\nimport ArticleHeader from '../../components/article/ArticleHeader';\nimport Navbar from '../../components/base/Navbar';\nimport { NewBlock } from \"../../components/article/RenderBlocks\";\nimport AuthorBio from \"../../components/article/AuthorBio\";\nimport FeaturedArticles from \"../../components/article/FeaturedArticles\";\nimport styled from \"styled-components\"; // TODO: We're going to have add multiple themes, will be a mini refactor.\n\nconst ArticleDocument = gql`\nquery Article($slug: String) {\n  postBy(slug: $slug) {\n    __typename\n    title\n    id\n    date\n    desiredSlug\n    excerpt\n    featuredImage {\n      sourceUrl\n      altText\n    }\n    categories {\n      nodes {\n        name\n        slug\n      }\n    }\n    coAuthors {\n      id\n      display_name\n      slug\n      bio\n      avatar\n      job_title\n    }\n    blocks {\n      __typename\n      ... on CoreHeadingBlock {\n        __typename\n        attributes {\n          __typename\n          ... on CoreHeadingBlockAttributes {\n            __typename\n            content\n            level\n          }\n        }\n      }\n      ... on CoreImageBlock {\n        attributes {\n          __typename\n          ... on CoreImageBlockAttributes {\n            __typename\n            url\n            caption\n          }\n        }\n      }\n      ... on CoreQuoteBlock {\n        __typename\n        attributes {\n          ... on CoreQuoteBlockAttributes {\n            __typename\n            quote: value\n            source: citation\n          }\n        }\n      }\n      ... on CoreListBlock {\n        __typename\n        attributes {\n          values\n        }\n      }\n      ... on CoreParagraphBlock {\n        __typename\n        name\n        attributes {\n          ... on CoreParagraphBlockAttributesV3 {\n            __typename\n            content\n            dropCap\n            align\n          }\n        }\n      }\n      ... on CoreGalleryBlock {\n        __typename\n        attributes {\n          ... on CoreGalleryBlockAttributes {\n            __typename\n            ids\n            images\n            linkTo\n          }\n        }\n      }\n    }\n  }\n}`;\nconst ArticleWrapper = styled.article`\n  display: grid; \n  grid-template-columns: repeat(8, 1fr);\n`;\nconst ArticleContent = styled.section`\n  grid-column: 1 / 6;\n  width: 100%;\n  @media screen and (max-width: 1200px) {\n    grid-column: 1/ -1;\n  }\n\n`;\nconst ArticleAside = styled.aside`\n  grid-column: 6 / -1;\n  width: 100%;\n  @media screen and (max-width: 1200px) {\n    grid-column: 1/ -1;\n  }\n`;\n\nconst Article = ({\n  slug\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(ArticleDocument, {\n    variables: {\n      slug: slug\n    }\n  });\n  if (loading) return __jsx(\"p\", null, \"Loading Post...\");\n  if (error) return __jsx(\"p\", null, \"Something wrong happened!\");\n  let article = data.postBy;\n  console.log(article);\n  const elements = article.blocks.map(block => __jsx(NewBlock, block));\n  return __jsx(React.Fragment, null, __jsx(Navbar, null), article.featuredImage ? __jsx(FeaturedImage, {\n    src: article.featuredImage.sourceUrl,\n    alt: article.featuredImage.altText\n  }) : \"\", __jsx(Layout, null, __jsx(ArticleWrapper, null, __jsx(ArticleHeader, {\n    title: article.title,\n    description: article.excerpt.replace(/<[^>]*>?/gm, ''),\n    coAuthors: article.coAuthors,\n    date: article.date,\n    section: article.categories.nodes[0]\n  }), __jsx(ArticleContent, null, elements, __jsx(AuthorBio, {\n    authors: article.coAuthors\n  })), __jsx(ArticleAside, null, __jsx(FeaturedArticles, null)))));\n};\n\nArticle.getInitialProps = async ({\n  query\n}) => {\n  return {\n    slug: query.slug\n  };\n};\n\nexport default Article;","map":null,"metadata":{},"sourceType":"module"}