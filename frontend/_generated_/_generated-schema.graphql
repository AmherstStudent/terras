schema {
  query: RootQuery
  mutation: RootMutation
}

"""
Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from.
"""
type Avatar {
  """
  URL for the default image or a default type. Accepts &#039;404&#039; (return a
  404 instead of a default image), &#039;retro&#039; (8bit),
  &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face),
  &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;,
  &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039;
  (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo).
  """
  default: String

  """
  HTML attributes to insert in the IMG element. Is not sanitized.
  """
  extraAttr: String

  """
  Whether to always show the default image, never the Gravatar.
  """
  forceDefault: Boolean

  """
  Whether the avatar was successfully found.
  """
  foundAvatar: Boolean

  """
  Height of the avatar image.
  """
  height: Int

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;,
  &#039;R&#039;, &#039;X&#039;, and are judged in that order.
  """
  rating: String

  """
  Type of url scheme to use. Typically HTTP vs. HTTPS.
  """
  scheme: String

  """
  The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image.
  """
  size: Int

  """
  URL for the gravatar image source.
  """
  url: String

  """
  Width of the avatar image.
  """
  width: Int
}

"""
What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are
judged in that order. Default is the value of the 'avatar_rating' option
"""
enum AvatarRatingEnum {
  G
  PG
  R
  X
}

"""
Gutenberg block interface
"""
interface Block {
  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

scalar BlockAttributesArray

scalar BlockAttributesObject

scalar BlockJsonArray

"""
A post with blocks
"""
interface BlocksPost {
  """
  Gutenberg blocks
  """
  blocks: [Block]

  """
  Gutenberg blocks as json string
  """
  blocksJSON: BlockJsonArray
  id: ID!
  link: String
}

"""
The category type
"""
type Category implements Node {
  """
  The ancestors of the object
  """
  ancestors: [Category]

  """
  The id field matches the WP_Post-&gt;ID field.
  """
  categoryId: Int

  """
  Connection between the category type and the category type
  """
  children(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: CategoryToCategoryConnectionWhereArgs
  ): CategoryToCategoryConnection

  """
  The number of objects connected to the object
  """
  count: Int

  """
  The description of the object
  """
  description: String

  """
  The global ID for the category
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  The link to the term
  """
  link: String

  """
  The human friendly name of the object.
  """
  name: String

  """
  The parent object
  """
  parent: Category

  """
  Connection between the category type and the category type
  """
  posts(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: CategoryToPostConnectionWhereArgs
  ): CategoryToPostConnection

  """
  An alphanumeric identifier for the object unique to its type.
  """
  slug: String

  """
  The name of the taxonomy this term belongs to
  """
  taxonomy: Taxonomy

  """
  The ID of the term group that this term object belongs to
  """
  termGroupId: Int

  """
  The taxonomy ID that the object is associated with
  """
  termTaxonomyId: Int
}

"""
Connection between the category type and the category type
"""
type CategoryToCategoryConnection {
  """
  Edges for the CategoryToCategoryConnection connection
  """
  edges: [CategoryToCategoryConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Category]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type CategoryToCategoryConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Category
}

"""
Arguments for filtering the CategoryToCategoryConnection connection
"""
input CategoryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the category type and the category type
"""
type CategoryToPostConnection {
  """
  Edges for the CategoryToPostConnection connection
  """
  edges: [CategoryToPostConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Post]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type CategoryToPostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Post
}

"""
Arguments for filtering the CategoryToPostConnection connection
"""
input CategoryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Article co-authors
"""
type CoAuthor {
  """
  Author avatar link.
  """
  avatar: String

  """
  This is the author description
  """
  bio: String

  """
  The name of the author
  """
  display_name: String

  """
  The author ID
  """
  id: ID

  """
  Author role, or job title
  """
  reporter_title: String

  """
  This is the author permalink
  """
  slug: String
}

"""
A Comment object
"""
type Comment implements Node {
  """
  User agent used to post the comment. This field is equivalent to
  WP_Comment-&gt;comment_agent and the value matching the
  &quot;comment_agent&quot; column in SQL.
  """
  agent: String

  """
  The approval status of the comment. This field is equivalent to
  WP_Comment-&gt;comment_approved and the value matching the
  &quot;comment_approved&quot; column in SQL.
  """
  approved: Boolean

  """
  The author of the comment
  """
  author: CommentAuthorUnion

  """
  IP address for the author. This field is equivalent to
  WP_Comment-&gt;comment_author_IP and the value matching the
  &quot;comment_author_IP&quot; column in SQL.
  """
  authorIp: String

  """
  Connection between the Comment type and the Comment type
  """
  children(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: CommentToCommentConnectionWhereArgs
  ): CommentToCommentConnection

  """
  ID for the comment, unique among comments.
  """
  commentId: Int

  """
  The object the comment was added to
  """
  commentedOn: PostObjectUnion

  """
  Content of the comment. This field is equivalent to
  WP_Comment-&gt;comment_content and the value matching the
  &quot;comment_content&quot; column in SQL.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  Date the comment was posted in local time. This field is equivalent to
  WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
  """
  date: String

  """
  Date the comment was posted in GMT. This field is equivalent to
  WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL.
  """
  dateGmt: String

  """
  The globally unique identifier for the user
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  Karma value for the comment. This field is equivalent to
  WP_Comment-&gt;comment_karma and the value matching the
  &quot;comment_karma&quot; column in SQL.
  """
  karma: Int

  """
  Parent comment of current comment. This field is equivalent to the WP_Comment
  instance matching the WP_Comment-&gt;comment_parent ID.
  """
  parent: Comment

  """
  Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and
  the value matching the &quot;comment_type&quot; column in SQL.
  """
  type: String
}

"""
A Comment Author object
"""
type CommentAuthor implements Node {
  """
  The email for the comment author
  """
  email: String

  """
  The globally unique identifier for the Comment Author user
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  The name for the comment author.
  """
  name: String

  """
  The url the comment author.
  """
  url: String
}

union CommentAuthorUnion = User | CommentAuthor

"""
Options for ordering the connection
"""
enum CommentsConnectionOrderbyEnum {
  COMMENT_AGENT
  COMMENT_APPROVED
  COMMENT_AUTHOR
  COMMENT_AUTHOR_EMAIL
  COMMENT_AUTHOR_IP
  COMMENT_AUTHOR_URL
  COMMENT_CONTENT
  COMMENT_DATE
  COMMENT_DATE_GMT
  COMMENT_ID
  COMMENT_IN
  COMMENT_KARMA
  COMMENT_PARENT
  COMMENT_POST_ID
  COMMENT_TYPE
  USER_ID
}

"""
Connection between the Comment type and the Comment type
"""
type CommentToCommentConnection {
  """
  Edges for the CommentToCommentConnection connection
  """
  edges: [CommentToCommentConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type CommentToCommentConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Comment
}

"""
Arguments for filtering the CommentToCommentConnection connection
"""
input CommentToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String

  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]

  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]

  """
  Comment author URL.
  """
  authorUrl: String

  """
  Array of comment IDs to include.
  """
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """
  Include comments of a given type.
  """
  commentType: String

  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]

  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String

  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]

  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]

  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """
  Content object name to retrieve affiliated comments for.
  """
  contentName: String

  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for.
  							Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [PostTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """
  Karma score to retrieve matching comments for.
  """
  karma: Int

  """
  The cardinality of the order of the connection
  """
  order: OrderEnum

  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum

  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int

  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """
  Search term(s) to retrieve matching comments for.
  """
  search: String

  """
  Comment status to limit results by.
  """
  status: String

  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
core/archives block
"""
type CoreArchivesBlock implements Block {
  attributes: CoreArchivesBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Server side rendered content.
  """
  renderedContent: String!

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreArchivesBlockAttributes {
  align: String
  className: String
  displayAsDropdown: Boolean!
  showPostCounts: Boolean!
}

"""
core/audio block
"""
type CoreAudioBlock implements Block {
  attributes: CoreAudioBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreAudioBlockAttributes {
  align: String
  autoplay: Boolean
  caption: String
  className: String
  id: Float
  loop: Boolean
  preload: String
  src: String
}

"""
core/button block
"""
type CoreButtonBlock implements Block {
  attributes: CoreButtonBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreButtonBlockAttributes {
  align: String
  backgroundColor: String
  borderRadius: Float
  className: String
  color: String @deprecated(reason: "Deprecated without breaking change.")
  customBackgroundColor: String
  customTextColor: String
  linkTarget: String
  placeholder: String
  rel: String
  text: String
  textColor: String
  title: String
  url: String
}

"""
core/calendar block
"""
type CoreCalendarBlock implements Block {
  attributes: CoreCalendarBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Server side rendered content.
  """
  renderedContent: String!

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreCalendarBlockAttributes {
  align: String
  className: String
  month: Int
  year: Int
}

"""
core/categories block
"""
type CoreCategoriesBlock implements Block {
  attributes: CoreCategoriesBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Server side rendered content.
  """
  renderedContent: String!

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreCategoriesBlockAttributes {
  align: String
  className: String
  displayAsDropdown: Boolean!
  showHierarchy: Boolean!
  showPostCounts: Boolean!
}

"""
core/code block
"""
type CoreCodeBlock implements Block {
  attributes: CoreCodeBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreCodeBlockAttributes {
  className: String
  content: String
}

"""
core/column block
"""
type CoreColumnBlock implements Block {
  attributes: CoreColumnBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreColumnBlockAttributes {
  className: String
  verticalAlignment: String
  width: Float
}

"""
core/columns block
"""
type CoreColumnsBlock implements Block {
  attributes: CoreColumnsBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreColumnsBlockAttributes {
  align: String
  className: String
  columns: Float! @deprecated(reason: "Deprecated without breaking change.")
  verticalAlignment: String
}

"""
core/cover block
"""
type CoreCoverBlock implements Block {
  attributes: CoreCoverBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreCoverBlockAttributes {
  align: String
  backgroundType: String!
  className: String
  contentAlign: String! @deprecated(reason: "Deprecated without breaking change.")
  customOverlayColor: String
  dimRatio: Float!
  focalPoint: BlockAttributesObject
  hasParallax: Boolean!
  id: Float
  minHeight: Float
  overlayColor: String
  title: String @deprecated(reason: "Deprecated without breaking change.")
  url: String
}

"""
core-embed/amazon-kindle block
"""
type CoreEmbedAmazonKindleBlock implements Block {
  attributes: CoreEmbedAmazonKindleBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedAmazonKindleBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/animoto block
"""
type CoreEmbedAnimotoBlock implements Block {
  attributes: CoreEmbedAnimotoBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedAnimotoBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core/embed block
"""
type CoreEmbedBlock implements Block {
  attributes: CoreEmbedBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/cloudup block
"""
type CoreEmbedCloudupBlock implements Block {
  attributes: CoreEmbedCloudupBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedCloudupBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/collegehumor block
"""
type CoreEmbedCollegehumorBlock implements Block {
  attributes: CoreEmbedCollegehumorBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedCollegehumorBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/crowdsignal block
"""
type CoreEmbedCrowdsignalBlock implements Block {
  attributes: CoreEmbedCrowdsignalBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedCrowdsignalBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/dailymotion block
"""
type CoreEmbedDailymotionBlock implements Block {
  attributes: CoreEmbedDailymotionBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedDailymotionBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/facebook block
"""
type CoreEmbedFacebookBlock implements Block {
  attributes: CoreEmbedFacebookBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedFacebookBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/flickr block
"""
type CoreEmbedFlickrBlock implements Block {
  attributes: CoreEmbedFlickrBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedFlickrBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/hulu block
"""
type CoreEmbedHuluBlock implements Block {
  attributes: CoreEmbedHuluBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedHuluBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/imgur block
"""
type CoreEmbedImgurBlock implements Block {
  attributes: CoreEmbedImgurBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedImgurBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/instagram block
"""
type CoreEmbedInstagramBlock implements Block {
  attributes: CoreEmbedInstagramBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedInstagramBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/issuu block
"""
type CoreEmbedIssuuBlock implements Block {
  attributes: CoreEmbedIssuuBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedIssuuBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/kickstarter block
"""
type CoreEmbedKickstarterBlock implements Block {
  attributes: CoreEmbedKickstarterBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedKickstarterBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/meetup-com block
"""
type CoreEmbedMeetupComBlock implements Block {
  attributes: CoreEmbedMeetupComBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedMeetupComBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/mixcloud block
"""
type CoreEmbedMixcloudBlock implements Block {
  attributes: CoreEmbedMixcloudBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedMixcloudBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/polldaddy block
"""
type CoreEmbedPolldaddyBlock implements Block {
  attributes: CoreEmbedPolldaddyBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedPolldaddyBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/reddit block
"""
type CoreEmbedRedditBlock implements Block {
  attributes: CoreEmbedRedditBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedRedditBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/reverbnation block
"""
type CoreEmbedReverbnationBlock implements Block {
  attributes: CoreEmbedReverbnationBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedReverbnationBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/screencast block
"""
type CoreEmbedScreencastBlock implements Block {
  attributes: CoreEmbedScreencastBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedScreencastBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/scribd block
"""
type CoreEmbedScribdBlock implements Block {
  attributes: CoreEmbedScribdBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedScribdBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/slideshare block
"""
type CoreEmbedSlideshareBlock implements Block {
  attributes: CoreEmbedSlideshareBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedSlideshareBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/smugmug block
"""
type CoreEmbedSmugmugBlock implements Block {
  attributes: CoreEmbedSmugmugBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedSmugmugBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/soundcloud block
"""
type CoreEmbedSoundcloudBlock implements Block {
  attributes: CoreEmbedSoundcloudBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedSoundcloudBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/speaker block
"""
type CoreEmbedSpeakerBlock implements Block {
  attributes: CoreEmbedSpeakerBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedSpeakerBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/speaker-deck block
"""
type CoreEmbedSpeakerDeckBlock implements Block {
  attributes: CoreEmbedSpeakerDeckBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedSpeakerDeckBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/spotify block
"""
type CoreEmbedSpotifyBlock implements Block {
  attributes: CoreEmbedSpotifyBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedSpotifyBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/ted block
"""
type CoreEmbedTedBlock implements Block {
  attributes: CoreEmbedTedBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedTedBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/tumblr block
"""
type CoreEmbedTumblrBlock implements Block {
  attributes: CoreEmbedTumblrBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedTumblrBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/twitter block
"""
type CoreEmbedTwitterBlock implements Block {
  attributes: CoreEmbedTwitterBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedTwitterBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/videopress block
"""
type CoreEmbedVideopressBlock implements Block {
  attributes: CoreEmbedVideopressBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedVideopressBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/vimeo block
"""
type CoreEmbedVimeoBlock implements Block {
  attributes: CoreEmbedVimeoBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedVimeoBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/wordpress block
"""
type CoreEmbedWordpressBlock implements Block {
  attributes: CoreEmbedWordpressBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedWordpressBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/wordpress-tv block
"""
type CoreEmbedWordpressTvBlock implements Block {
  attributes: CoreEmbedWordpressTvBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedWordpressTvBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core-embed/youtube block
"""
type CoreEmbedYoutubeBlock implements Block {
  attributes: CoreEmbedYoutubeBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreEmbedYoutubeBlockAttributes {
  align: String
  allowResponsive: Boolean!
  caption: String
  className: String
  providerNameSlug: String
  type: String
  url: String
}

"""
core/file block
"""
type CoreFileBlock implements Block {
  attributes: CoreFileBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreFileBlockAttributes {
  align: String
  className: String
  downloadButtonText: String
  fileName: String
  href: String
  id: Float
  showDownloadButton: Boolean!
  textLinkHref: String
  textLinkTarget: String
}

"""
core/freeform block
"""
type CoreFreeformBlock implements Block {
  attributes: CoreFreeformBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreFreeformBlockAttributes {
  content: String
}

"""
core/gallery block
"""
type CoreGalleryBlock implements Block {
  attributes: CoreGalleryBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreGalleryBlockAttributes {
  align: String
  caption: String
  className: String
  columns: Float
  ids: BlockAttributesArray!
  imageCrop: Boolean!
  images: BlockAttributesArray!
  linkTo: String!
}

"""
core/group block
"""
type CoreGroupBlock implements Block {
  attributes: CoreGroupBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreGroupBlockAttributes {
  align: String
  anchor: String
  backgroundColor: String
  className: String
  customBackgroundColor: String
}

"""
core/heading block
"""
type CoreHeadingBlock implements Block {
  attributes: CoreHeadingBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreHeadingBlockAttributes {
  align: String
  anchor: String
  className: String
  content: String!
  customTextColor: String
  level: Float!
  placeholder: String
  textColor: String
}

"""
core/html block
"""
type CoreHtmlBlock implements Block {
  attributes: CoreHtmlBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreHtmlBlockAttributes {
  content: String
}

"""
core/image block
"""
type CoreImageBlock implements Block {
  attributes: CoreImageBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreImageBlockAttributes {
  align: String
  alt: String!
  caption: String
  className: String
  height: Float
  href: String
  id: Float
  linkClass: String
  linkDestination: String!
  linkTarget: String
  rel: String
  sizeSlug: String
  url: String
  width: Float
}

"""
core/latest-comments block
"""
type CoreLatestCommentsBlock implements Block {
  attributes: CoreLatestCommentsBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Server side rendered content.
  """
  renderedContent: String!

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreLatestCommentsBlockAttributes {
  align: String
  className: String
  commentsToShow: Float!
  displayAvatar: Boolean!
  displayDate: Boolean!
  displayExcerpt: Boolean!
}

"""
core/latest-posts block
"""
type CoreLatestPostsBlock implements Block {
  attributes: CoreLatestPostsBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Server side rendered content.
  """
  renderedContent: String!

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreLatestPostsBlockAttributes {
  align: String
  categories: String
  className: String
  columns: Float!
  displayPostContent: Boolean!
  displayPostContentRadio: String!
  displayPostDate: Boolean!
  excerptLength: Float!
  order: String!
  orderBy: String!
  postLayout: String!
  postsToShow: Float!
}

"""
core/list block
"""
type CoreListBlock implements Block {
  attributes: CoreListBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreListBlockAttributes {
  className: String
  ordered: Boolean!
  reversed: Boolean
  start: Float
  values: String!
}

"""
core/media-text block
"""
type CoreMediaTextBlock implements Block {
  attributes: CoreMediaTextBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreMediaTextBlockAttributes {
  align: String!
  backgroundColor: String
  className: String
  customBackgroundColor: String
  focalPoint: BlockAttributesObject
  imageFill: Boolean
  isStackedOnMobile: Boolean!
  mediaAlt: String!
  mediaId: Float
  mediaPosition: String!
  mediaType: String
  mediaUrl: String
  mediaWidth: Float!
  verticalAlignment: String
}

"""
core/missing block
"""
type CoreMissingBlock implements Block {
  attributes: CoreMissingBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreMissingBlockAttributes {
  originalContent: String
  originalName: String
  originalUndelimitedContent: String
}

"""
core/more block
"""
type CoreMoreBlock implements Block {
  attributes: CoreMoreBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreMoreBlockAttributes {
  customText: String
  noTeaser: Boolean!
}

"""
core/nextpage block
"""
type CoreNextpageBlock implements Block {
  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

"""
core/paragraph block
"""
type CoreParagraphBlock implements Block {
  attributes: CoreParagraphBlockAttributesUnion

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreParagraphBlockAttributes {
  align: String
  backgroundColor: String
  className: String
  content: String!
  customBackgroundColor: String
  customFontSize: Float
  customTextColor: String
  direction: String
  dropCap: Boolean!
  fontSize: String
  placeholder: String
  textColor: String
}

union CoreParagraphBlockAttributesUnion = CoreParagraphBlockAttributes | CoreParagraphBlockAttributesV2 | CoreParagraphBlockAttributesV3

type CoreParagraphBlockAttributesV2 {
  align: String
  backgroundColor: String
  className: String
  content: String!
  customBackgroundColor: String @deprecated(reason: "Deprecated without breaking change.")
  customFontSize: Float @deprecated(reason: "Deprecated without breaking change.")
  customTextColor: String @deprecated(reason: "Deprecated without breaking change.")
  direction: String
  dropCap: Boolean!
  fontSize: Float
  placeholder: String
  textColor: String
}

type CoreParagraphBlockAttributesV3 {
  align: String
  backgroundColor: String
  className: String
  content: String!
  customBackgroundColor: String
  customFontSize: Float
  customTextColor: String
  direction: String
  dropCap: Boolean!
  fontSize: String
  placeholder: String
  textColor: String
  width: String @deprecated(reason: "Deprecated without breaking change.")
}

"""
core/preformatted block
"""
type CorePreformattedBlock implements Block {
  attributes: CorePreformattedBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CorePreformattedBlockAttributes {
  className: String
  content: String!
}

"""
core/pullquote block
"""
type CorePullquoteBlock implements Block {
  attributes: CorePullquoteBlockAttributesUnion

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CorePullquoteBlockAttributes {
  align: String!
  citation: String
  className: String
  customMainColor: String
  customTextColor: String
  mainColor: String
  textColor: String
  value: String
}

union CorePullquoteBlockAttributesUnion = CorePullquoteBlockAttributes | CorePullquoteBlockAttributesV2

type CorePullquoteBlockAttributesV2 {
  align: String
  citation: String!
  className: String
  customMainColor: String
  customTextColor: String
  mainColor: String
  textColor: String
  value: String
}

"""
core/quote block
"""
type CoreQuoteBlock implements Block {
  attributes: CoreQuoteBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreQuoteBlockAttributes {
  align: String
  citation: String!
  className: String
  style: Float! @deprecated(reason: "Deprecated without breaking change.")
  value: String!
}

"""
core/rss block
"""
type CoreRssBlock implements Block {
  attributes: CoreRssBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Server side rendered content.
  """
  renderedContent: String!

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreRssBlockAttributes {
  align: String
  blockLayout: String!
  className: String
  columns: Float!
  displayAuthor: Boolean!
  displayDate: Boolean!
  displayExcerpt: Boolean!
  excerptLength: Float!
  feedURL: String!
  itemsToShow: Float!
}

"""
core/search block
"""
type CoreSearchBlock implements Block {
  attributes: CoreSearchBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Server side rendered content.
  """
  renderedContent: String!

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreSearchBlockAttributes {
  align: String
  buttonText: String!
  className: String
  label: String!
  placeholder: String!
}

"""
core/separator block
"""
type CoreSeparatorBlock implements Block {
  attributes: CoreSeparatorBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreSeparatorBlockAttributes {
  className: String
  color: String
  customColor: String
}

"""
core/shortcode block
"""
type CoreShortcodeBlock implements Block {
  attributes: CoreShortcodeBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Server side rendered content.
  """
  renderedContent: String!

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreShortcodeBlockAttributes {
  text: String
}

"""
core/spacer block
"""
type CoreSpacerBlock implements Block {
  attributes: CoreSpacerBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreSpacerBlockAttributes {
  className: String
  height: Float!
}

"""
core/subhead block
"""
type CoreSubheadBlock implements Block {
  attributes: CoreSubheadBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreSubheadBlockAttributes {
  align: String
  className: String
  content: String
}

"""
core/table block
"""
type CoreTableBlock implements Block {
  attributes: CoreTableBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreTableBlockAttributes {
  align: String
  backgroundColor: String
  body: BlockAttributesArray!
  className: String
  foot: BlockAttributesArray!
  hasFixedLayout: Boolean!
  head: BlockAttributesArray!
}

"""
core/tag-cloud block
"""
type CoreTagCloudBlock implements Block {
  attributes: CoreTagCloudBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Server side rendered content.
  """
  renderedContent: String!

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreTagCloudBlockAttributes {
  align: String
  className: String
  showTagCounts: Boolean!
  taxonomy: String!
}

"""
core/text-columns block
"""
type CoreTextColumnsBlock implements Block {
  attributes: CoreTextColumnsBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreTextColumnsBlockAttributes {
  className: String
  columns: Float!
  content: BlockAttributesArray!
  width: String
}

"""
core/verse block
"""
type CoreVerseBlock implements Block {
  attributes: CoreVerseBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreVerseBlockAttributes {
  className: String
  content: String!
  textAlign: String
}

"""
core/video block
"""
type CoreVideoBlock implements Block {
  attributes: CoreVideoBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type CoreVideoBlockAttributes {
  align: String
  autoplay: Boolean
  caption: String
  className: String
  controls: Boolean!
  id: Float
  loop: Boolean
  muted: Boolean
  playsInline: Boolean
  poster: String
  preload: String!
  src: String
}

"""
Input for the createCategory mutation
"""
input CreateCategoryInput {
  """
  The slug that the category will be an alias of
  """
  aliasOf: String
  clientMutationId: String!

  """
  The description of the category object
  """
  description: String

  """
  The name of the category object to mutate
  """
  name: String!

  """
  The ID of the category that should be set as the parent
  """
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the createCategory mutation
"""
type CreateCategoryPayload {
  """
  The created category
  """
  category: Category
  clientMutationId: String!
}

"""
Input for the createComment mutation
"""
input CreateCommentInput {
  """
  User agent used to post the comment.
  """
  agent: String

  """
  The approval status of the comment.
  """
  approved: String

  """
  The name of the comment's author.
  """
  author: String

  """
  The email of the comment's author.
  """
  authorEmail: String

  """
  IP address for the comment's author.
  """
  authorIp: String

  """
  The url of the comment's author.
  """
  authorUrl: String
  clientMutationId: String!

  """
  The ID of the post object the comment belongs to.
  """
  commentOn: Int

  """
  Content of the comment.
  """
  content: String

  """
  The date of the object. Preferable to enter as year/month/day ( e.g.
  01/31/2017 ) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """
  Parent comment of current comment.
  """
  parent: ID

  """
  Type of comment.
  """
  type: String

  """
  The userID of the comment's author.
  """
  userId: Int
}

"""
The payload for the createComment mutation
"""
type CreateCommentPayload {
  clientMutationId: String!

  """
  The comment that was created
  """
  comment: Comment

  """
  Whether the mutation succeeded. If the comment is not approved, the server
  will not return the comment to a non authenticated user, but a success message
  can be returned if the create succeeded, and the client can optimistically add
  the comment to the client cache
  """
  success: Boolean
}

"""
Input for the createIssue mutation
"""
input CreateIssueInput {
  """
  The slug that the issue will be an alias of
  """
  aliasOf: String
  clientMutationId: String!

  """
  The description of the issue object
  """
  description: String

  """
  The name of the issue object to mutate
  """
  name: String!

  """
  The ID of the issue that should be set as the parent
  """
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the createIssue mutation
"""
type CreateIssuePayload {
  """
  The created issue
  """
  issue: Issue
  clientMutationId: String!
}

"""
Input for the createMediaItem mutation
"""
input CreateMediaItemInput {
  """
  Alternative text to display when mediaItem is not displayed
  """
  altText: String

  """
  The userId to assign as the author of the mediaItem
  """
  authorId: ID

  """
  The caption for the mediaItem
  """
  caption: String
  clientMutationId: String!

  """
  The comment status for the mediaItem
  """
  commentStatus: String

  """
  The date of the mediaItem
  """
  date: String

  """
  The date (in GMT zone) of the mediaItem
  """
  dateGmt: String

  """
  Description of the mediaItem
  """
  description: String

  """
  The file name of the mediaItem
  """
  filePath: String

  """
  The file type of the mediaItem
  """
  fileType: MimeTypeEnum

  """
  The WordPress post ID or the graphQL postId of the parent object
  """
  parentId: ID

  """
  The ping status for the mediaItem
  """
  pingStatus: String

  """
  The slug of the mediaItem
  """
  slug: String

  """
  The status of the mediaItem
  """
  status: MediaItemStatusEnum

  """
  The title of the mediaItem
  """
  title: String
}

"""
The payload for the createMediaItem mutation
"""
type CreateMediaItemPayload {
  clientMutationId: String!
  mediaItem: MediaItem
}

"""
Input for the createPage mutation
"""
input CreatePageInput {
  """
  The userId to assign as the author of the post
  """
  authorId: ID
  clientMutationId: String!

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """
  The comment status for the object
  """
  commentStatus: String

  """
  The content of the object
  """
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """
  The excerpt of the object
  """
  excerpt: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  If the post is an attachment or a media file, this field will carry the
  corresponding MIME type. This field is equivalent to the value of
  WP_Post->post_mime_type and the post_mime_type column in the "post_objects"
  database table.
  """
  mimeType: MimeTypeEnum

  """
  The ID of the parent object
  """
  parentId: ID

  """
  The password used to protect the content of the object
  """
  password: String

  """
  The ping status for the object
  """
  pingStatus: String

  """
  URLs that have been pinged.
  """
  pinged: [String]

  """
  The slug of the object
  """
  slug: String

  """
  The status of the object
  """
  status: PostStatusEnum

  """
  The title of the post
  """
  title: String

  """
  URLs queued to be pinged.
  """
  toPing: [String]
}

"""
The payload for the createPage mutation
"""
type CreatePagePayload {
  clientMutationId: String!
  page: Page
}

"""
Input for the createPost mutation
"""
input CreatePostInput {
  """
  Set connections between the post and Issues
  """
  issues: PostIssuesInput

  """
  Set connections between the post and SeriesN
  """
  seriesN: PostSeriesNInput

  """
  The userId to assign as the author of the post
  """
  authorId: ID

  """
  Set connections between the post and categories
  """
  categories: PostCategoriesInput
  clientMutationId: String!

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """
  The comment status for the object
  """
  commentStatus: String

  """
  The content of the object
  """
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """
  The excerpt of the object
  """
  excerpt: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  If the post is an attachment or a media file, this field will carry the
  corresponding MIME type. This field is equivalent to the value of
  WP_Post->post_mime_type and the post_mime_type column in the "post_objects"
  database table.
  """
  mimeType: MimeTypeEnum

  """
  The ID of the parent object
  """
  parentId: ID

  """
  The password used to protect the content of the object
  """
  password: String

  """
  The ping status for the object
  """
  pingStatus: String

  """
  URLs that have been pinged.
  """
  pinged: [String]

  """
  The slug of the object
  """
  slug: String

  """
  The status of the object
  """
  status: PostStatusEnum

  """
  Set connections between the post and tags
  """
  tags: PostTagsInput

  """
  The title of the post
  """
  title: String

  """
  URLs queued to be pinged.
  """
  toPing: [String]
}

"""
The payload for the createPost mutation
"""
type CreatePostPayload {
  clientMutationId: String!
  post: Post
}

"""
Input for the createSeries mutation
"""
input CreateSeriesInput {
  """
  The slug that the series will be an alias of
  """
  aliasOf: String
  clientMutationId: String!

  """
  The description of the series object
  """
  description: String

  """
  The name of the series object to mutate
  """
  name: String!

  """
  The ID of the series that should be set as the parent
  """
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the createSeries mutation
"""
type CreateSeriesPayload {
  """
  The created series
  """
  series: Series
  clientMutationId: String!
}

"""
Input for the createTag mutation
"""
input CreateTagInput {
  """
  The slug that the post_tag will be an alias of
  """
  aliasOf: String
  clientMutationId: String!

  """
  The description of the post_tag object
  """
  description: String

  """
  The name of the post_tag object to mutate
  """
  name: String!

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the createTag mutation
"""
type CreateTagPayload {
  clientMutationId: String!

  """
  The created post_tag
  """
  tag: Tag
}

"""
Input for the createUser mutation
"""
input CreateUserInput {
  """
  User's AOL IM account.
  """
  aim: String
  clientMutationId: String!

  """
  A string containing content about the user.
  """
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """
  A string containing the user's email address.
  """
  email: String

  """
  The user's first name.
  """
  firstName: String

  """
  User's Jabber account.
  """
  jabber: String

  """
  The user's last name.
  """
  lastName: String

  """
  User's locale.
  """
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """
  The user's nickname, defaults to the user's username.
  """
  nickname: String

  """
  A string that contains the plain text password for the user.
  """
  password: String

  """
  The date the user registered. Format is Y-m-d H:i:s.
  """
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """
  An array of roles to be assigned to the user.
  """
  roles: [String]

  """
  A string that contains the user's username for logging in.
  """
  username: String!

  """
  A string containing the user's URL for the user's web site.
  """
  websiteUrl: String

  """
  User's Yahoo IM account.
  """
  yim: String
}

"""
The payload for the createUser mutation
"""
type CreateUserPayload {
  clientMutationId: String!
  user: User
}

"""
Date values
"""
input DateInput {
  """
  Day of the month (from 1 to 31)
  """
  day: Int

  """
  Month number (from 1 to 12)
  """
  month: Int

  """
  4 digit year (e.g. 2017)
  """
  year: Int
}

"""
Filter the connection based on input
"""
input DateQueryInput {
  after: DateInput
  before: DateInput

  """
  Column to query against
  """
  column: PostObjectsConnectionDateColumnEnum

  """
  For after/before, whether exact value should be matched or not
  """
  compare: String

  """
  Day of the month (from 1 to 31)
  """
  day: Int

  """
  Hour (from 0 to 23)
  """
  hour: Int

  """
  For after/before, whether exact value should be matched or not
  """
  inclusive: Boolean

  """
  Minute (from 0 to 59)
  """
  minute: Int

  """
  Month number (from 1 to 12)
  """
  month: Int

  """
  OR or AND, how the sub-arrays should be compared
  """
  relation: RelationEnum

  """
  Second (0 to 59)
  """
  second: Int

  """
  Week of the year (from 0 to 53)
  """
  week: Int

  """
  4 digit year (e.g. 2017)
  """
  year: Int
}

"""
Input for the deleteCategory mutation
"""
input DeleteCategoryInput {
  clientMutationId: String!

  """
  The ID of the category to delete
  """
  id: ID!
}

"""
The payload for the deleteCategory mutation
"""
type DeleteCategoryPayload {
  """
  The deteted term object
  """
  category: Category
  clientMutationId: String!

  """
  The ID of the deleted object
  """
  deletedId: ID
}

"""
Input for the deleteComment mutation
"""
input DeleteCommentInput {
  clientMutationId: String!

  """
  Whether the comment should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """
  The deleted comment ID
  """
  id: ID!
}

"""
The payload for the deleteComment mutation
"""
type DeleteCommentPayload {
  clientMutationId: String!

  """
  The deleted comment object
  """
  comment: Comment

  """
  The deleted comment ID
  """
  deletedId: ID
}

"""
Input for the deleteIssue mutation
"""
input DeleteIssueInput {
  clientMutationId: String!

  """
  The ID of the Issue to delete
  """
  id: ID!
}

"""
The payload for the deleteIssue mutation
"""
type DeleteIssuePayload {
  """
  The deteted term object
  """
  issue: Issue
  clientMutationId: String!

  """
  The ID of the deleted object
  """
  deletedId: ID
}

"""
Input for the deleteMediaItem mutation
"""
input DeleteMediaItemInput {
  clientMutationId: String!

  """
  Whether the mediaItem should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """
  The ID of the mediaItem to delete
  """
  id: ID!
}

"""
The payload for the deleteMediaItem mutation
"""
type DeleteMediaItemPayload {
  clientMutationId: String!

  """
  The ID of the deleted mediaItem
  """
  deletedId: ID

  """
  The mediaItem before it was deleted
  """
  mediaItem: MediaItem
}

"""
Input for the deletePage mutation
"""
input DeletePageInput {
  clientMutationId: String!

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """
  The ID of the page to delete
  """
  id: ID!
}

"""
The payload for the deletePage mutation
"""
type DeletePagePayload {
  clientMutationId: String!

  """
  The ID of the deleted object
  """
  deletedId: ID

  """
  The object before it was deleted
  """
  page: Page
}

"""
Input for the deletePost mutation
"""
input DeletePostInput {
  clientMutationId: String!

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """
  The ID of the post to delete
  """
  id: ID!
}

"""
The payload for the deletePost mutation
"""
type DeletePostPayload {
  clientMutationId: String!

  """
  The ID of the deleted object
  """
  deletedId: ID

  """
  The object before it was deleted
  """
  post: Post
}

"""
Input for the deleteRevision mutation
"""
input DeleteRevisionInput {
  clientMutationId: String!

  """
  Whether the object should be force deleted instead of being moved to the trash
  """
  forceDelete: Boolean

  """
  The ID of the revision to delete
  """
  id: ID!
}

"""
The payload for the deleteRevision mutation
"""
type DeleteRevisionPayload {
  clientMutationId: String!

  """
  The ID of the deleted object
  """
  deletedId: ID

  """
  The object before it was deleted
  """
  revision: Revision
}

"""
Input for the deleteSeries mutation
"""
input DeleteSeriesInput {
  clientMutationId: String!

  """
  The ID of the Series to delete
  """
  id: ID!
}

"""
The payload for the deleteSeries mutation
"""
type DeleteSeriesPayload {
  """
  The deteted term object
  """
  series: Series
  clientMutationId: String!

  """
  The ID of the deleted object
  """
  deletedId: ID
}

"""
Input for the deleteTag mutation
"""
input DeleteTagInput {
  clientMutationId: String!

  """
  The ID of the tag to delete
  """
  id: ID!
}

"""
The payload for the deleteTag mutation
"""
type DeleteTagPayload {
  clientMutationId: String!

  """
  The ID of the deleted object
  """
  deletedId: ID

  """
  The deteted term object
  """
  tag: Tag
}

"""
Input for the deleteUser mutation
"""
input DeleteUserInput {
  clientMutationId: String!

  """
  The ID of the user you want to delete
  """
  id: ID!

  """
  Reassign posts and links to new User ID.
  """
  reassignId: ID
}

"""
The payload for the deleteUser mutation
"""
type DeleteUserPayload {
  clientMutationId: String!

  """
  The ID of the user that you just deleted
  """
  deletedId: ID

  """
  The deleted user object
  """
  user: User
}

"""
The discussion setting type
"""
type DiscussionSettings {
  """
  Allow people to submit comments on new posts.
  """
  defaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  defaultPingStatus: String
}

"""
Info on whether the object is locked by another user editing it
"""
type EditLock {
  """
  The time when the object was last edited
  """
  editTime: String

  """
  The user that most recently edited the object
  """
  user: User
}

"""
The general setting type
"""
type GeneralSettings {
  """
  A date format for all date strings.
  """
  dateFormat: String

  """
  Site tagline.
  """
  description: String

  """
  This address is used for admin purposes, like new user notification.
  """
  email: String

  """
  WordPress locale code.
  """
  language: String

  """
  A day number of the week that the week should start on.
  """
  startOfWeek: Int

  """
  A time format for all time strings.
  """
  timeFormat: String

  """
  A city in the same timezone as you.
  """
  timezone: String

  """
  Site title.
  """
  title: String

  """
  Site URL.
  """
  url: String
}

"""
home/featured-postlist block
"""
type HomeFeaturedPostlistBlock implements Block {
  attributes: HomeFeaturedPostlistBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type HomeFeaturedPostlistBlockAttributes {
  className: String
  featuredPosts: BlockAttributesArray!
}

"""
home/hero-image block
"""
type HomeHeroImageBlock implements Block {
  attributes: HomeHeroImageBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type HomeHeroImageBlockAttributes {
  authors: BlockAttributesArray!
  category: String!
  category_slug: String!
  className: String
  date: String
  excerpt: String!
  featuredImageAlt: String
  featuredImageUrl: String
  issue: String!
  postID: String!
  slug: String
  title: String!
}

"""
home/homepage-quote block
"""
type HomeHomepageQuoteBlock implements Block {
  attributes: HomeHomepageQuoteBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type HomeHomepageQuoteBlockAttributes {
  className: String
  postID: String
  postSlug: String
  quote: String!
  source: String!
}

"""
home/large-article block
"""
type HomeLargeArticleBlock implements Block {
  attributes: HomeLargeArticleBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type HomeLargeArticleBlockAttributes {
  authors: BlockAttributesArray!
  category: String!
  category_slug: String!
  className: String
  date: String
  excerpt: String!
  featuredImageAlt: String!
  featuredImageUrl: String!
  issue: String!
  postID: String!
  slug: String
  title: String!
}

"""
home/small-article block
"""
type HomeSmallArticleBlock implements Block {
  attributes: HomeSmallArticleBlockAttributes

  """
  Inner blocks.
  """
  innerBlocks: [Block]!

  """
  Block validation assumes an idempotent operation from source block to serialized block
  """
  isValid: Boolean!

  """
  Name of the block.
  """
  name: String!

  """
  Original HTML content.
  """
  originalContent: String!

  """
  Parent post.
  """
  parent: PostObjectTypesWithBlocksUnion

  """
  Parent post id.
  """
  parentId: Int

  """
  Original HTML content with inner blocks.
  """
  saveContent: String!
}

type HomeSmallArticleBlockAttributes {
  authors: BlockAttributesArray!
  category: String!
  category_slug: String!
  className: String
  date: String
  excerpt: String!
  featuredImageAlt: String
  featuredImageUrl: String
  issue: String!
  postID: String!
  slug: String
  title: String!
}

"""
The Issue type
"""
type Issue implements Node {
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  issueId: Int

  """
  The ancestors of the object
  """
  ancestors: [Issue]

  """
  Connection between the Issue type and the Issue type
  """
  children(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: IssueToIssueConnectionWhereArgs
  ): IssueToIssueConnection

  """
  The number of objects connected to the object
  """
  count: Int

  """
  The description of the object
  """
  description: String

  """
  The global ID for the issue
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  The Issuu link
  """
  issuu: String

  """
  The link to the term
  """
  link: String

  """
  The human friendly name of the object.
  """
  name: String

  """
  The parent object
  """
  parent: Issue

  """
  Connection between the Issue type and the Issue type
  """
  posts(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: IssueToPostConnectionWhereArgs
  ): IssueToPostConnection

  """
  An alphanumeric identifier for the object unique to its type.
  """
  slug: String

  """
  The name of the taxonomy this term belongs to
  """
  taxonomy: Taxonomy

  """
  The ID of the term group that this term object belongs to
  """
  termGroupId: Int

  """
  The taxonomy ID that the object is associated with
  """
  termTaxonomyId: Int
}

"""
Connection between the Issue type and the Issue type
"""
type IssueToIssueConnection {
  """
  Edges for the IssueToIssueConnection connection
  """
  edges: [IssueToIssueConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Issue]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type IssueToIssueConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Issue
}

"""
Arguments for filtering the IssueToIssueConnection connection
"""
input IssueToIssueConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the Issue type and the Issue type
"""
type IssueToPostConnection {
  """
  Edges for the IssueToPostConnection connection
  """
  edges: [IssueToPostConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Post]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type IssueToPostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Post
}

"""
Arguments for filtering the IssueToPostConnection connection
"""
input IssueToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
File details for a Media Item
"""
type MediaDetails {
  """
  The height of the mediaItem
  """
  file: String

  """
  The height of the mediaItem
  """
  height: Int
  meta: MediaItemMeta

  """
  The available sizes of the mediaItem
  """
  sizes: [MediaSize]

  """
  The width of the mediaItem
  """
  width: Int
}

"""
The mediaItem type
"""
type MediaItem implements Node & BlocksPost {
  """
  Alternative text to display when resource is not displayed
  """
  altText: String

  """
  Ancestors of the object
  """
  ancestors(
    """
    The types of ancestors to check for. Defaults to the same type as the current object
    """
    types: [PostTypeEnum]
  ): [PostObjectUnion]

  """
  The author field will return a queryable User type matching the post&#039;s author.
  """
  author: User

  """
  Gutenberg blocks
  """
  blocks(json: String): [Block]

  """
  Gutenberg blocks as json string
  """
  blocksJSON: BlockJsonArray

  """
  The caption for the resource
  """
  caption(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """
  Whether the comments are open or closed for this particular post.
  """
  commentStatus: String

  """
  Connection between the mediaItem type and the mediaItem type
  """
  comments(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: MediaItemToCommentConnectionWhereArgs
  ): MediaItemToCommentConnection

  """
  The content of the post.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String @deprecated(reason: "Use the description field instead of content")

  """
  Post publishing date.
  """
  date: String

  """
  The publishing date set in GMT.
  """
  dateGmt: String

  """
  Description of the image (stored as post_content)
  """
  description(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  The desired slug of the post
  """
  desiredSlug: String

  """
  The user that most recently edited the object
  """
  editLast: User

  """
  If a user has edited the object within the past 15 seconds, this will return
  the user and the time they last edited. Null if the edit lock doesn&#039;t
  exist or is greater than 15 seconds
  """
  editLock: EditLock

  """
  The RSS enclosure for the object
  """
  enclosure: String

  """
  The excerpt of the post.
  """
  excerpt(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String @deprecated(reason: "Use the caption field instead of excerpt")

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """
  The globally unique ID for the object
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  The permalink of the post
  """
  link: String

  """
  Details about the mediaItem
  """
  mediaDetails: MediaDetails

  """
  The id field matches the WP_Post-&gt;ID field.
  """
  mediaItemId: Int!

  """
  Url of the mediaItem
  """
  mediaItemUrl: String

  """
  Type of resource
  """
  mediaType: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  The mime type of the mediaItem
  """
  mimeType: String

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """
  The parent of the object. The parent object can be of various types
  """
  parent: PostObjectUnion

  """
  Whether the pings are open or closed for this particular post.
  """
  pingStatus: String

  """
  URLs that have been pinged.
  """
  pinged: [String]

  """
  The sizes attribute value for an image.
  """
  sizes(
    """
    Size of the MediaItem to calculate sizes with
    """
    size: MediaItemSizeEnum
  ): String

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """
  Url of the mediaItem
  """
  sourceUrl(
    """
    Size of the MediaItem to return
    """
    size: MediaItemSizeEnum
  ): String

  """
  The srcset attribute specifies the URL of the image to use in different
  situations. It is a comma separated string of urls and their widths.
  """
  srcSet(
    """
    Size of the MediaItem to calculate srcSet with
    """
    size: MediaItemSizeEnum
  ): String

  """
  The current status of the object
  """
  status: String

  """
  Terms connected to the mediaItem
  """
  termNames(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [String]

  """
  Terms connected to the mediaItem
  """
  termSlugs(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [String]

  """
  Terms connected to the mediaItem
  """
  terms(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [TermObjectUnion]

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  URLs queued to be pinged.
  """
  toPing: [String]

  """
  URI path for the resource
  """
  uri: String
}

"""
Meta connected to a MediaItem
"""
type MediaItemMeta {
  aperture: Float
  camera: String
  caption: String
  copyright: String
  createdTimestamp: Int
  credit: String
  focalLength: Int
  iso: Int
  keywords: [String]
  orientation: String
  shutterSpeed: Float
  title: String
}

"""
The size of the media item object.
"""
enum MediaItemSizeEnum {
  """
  MediaItem with the large size
  """
  LARGE

  """
  MediaItem with the medium size
  """
  MEDIUM

  """
  MediaItem with the medium_large size
  """
  MEDIUM_LARGE

  """
  MediaItem with the thumbnail size
  """
  THUMBNAIL

  """
  MediaItem with the 1536x1536 size
  """
  _1536X1536

  """
  MediaItem with the 2048x2048 size
  """
  _2048X2048
}

"""
The status of the media item object.
"""
enum MediaItemStatusEnum {
  """
  Objects with the auto-draft status
  """
  AUTO_DRAFT

  """
  Objects with the inherit status
  """
  INHERIT

  """
  Objects with the private status
  """
  PRIVATE

  """
  Objects with the trash status
  """
  TRASH
}

"""
Connection between the mediaItem type and the mediaItem type
"""
type MediaItemToCommentConnection {
  """
  Edges for the MediaItemToCommentConnection connection
  """
  edges: [MediaItemToCommentConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type MediaItemToCommentConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Comment
}

"""
Arguments for filtering the MediaItemToCommentConnection connection
"""
input MediaItemToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String

  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]

  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]

  """
  Comment author URL.
  """
  authorUrl: String

  """
  Array of comment IDs to include.
  """
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """
  Include comments of a given type.
  """
  commentType: String

  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]

  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String

  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]

  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]

  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """
  Content object name to retrieve affiliated comments for.
  """
  contentName: String

  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for.
  							Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [PostTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """
  Karma score to retrieve matching comments for.
  """
  karma: Int

  """
  The cardinality of the order of the connection
  """
  order: OrderEnum

  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum

  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int

  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """
  Search term(s) to retrieve matching comments for.
  """
  search: String

  """
  Comment status to limit results by.
  """
  status: String

  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Details of an available size for a media item
"""
type MediaSize {
  """
  The file of the for the referenced size
  """
  file: String

  """
  The height of the for the referenced size
  """
  height: String

  """
  The mime type of the resource
  """
  mimeType: String

  """
  The referenced size name
  """
  name: String

  """
  The url of the for the referenced size
  """
  sourceUrl: String

  """
  The width of the for the referenced size
  """
  width: String
}

"""
Menus are the containers for navigation items. Menus can be assigned to menu
locations, which are typically registered by the active theme.
"""
type Menu {
  """
  The number of items in the menu
  """
  count: Int

  """
  ID of the nav menu.
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  WP ID of the nav menu.
  """
  menuId: Int

  """
  Connection between the Menu type and the Menu type
  """
  menuItems(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: MenuToMenuItemConnectionWhereArgs
  ): MenuToMenuItemConnection

  """
  Display name of the menu. Equivalent to WP_Term-&gt;name.
  """
  name: String

  """
  The url friendly name of the menu. Equivalent to WP_Term-&gt;slug
  """
  slug: String
}

"""
Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu.
"""
type MenuItem {
  """
  Connection between the MenuItem type and the MenuItem type
  """
  childItems(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: MenuItemToMenuItemConnectionWhereArgs
  ): MenuItemToMenuItemConnection

  """
  The object connected to this menu item.
  """
  connectedObject: MenuItemObjectUnion

  """
  Class attribute for the menu item link
  """
  cssClasses: [String]

  """
  Description of the menu item.
  """
  description: String

  """
  Relay ID of the menu item.
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  Label or title of the menu item.
  """
  label: String

  """
  Link relationship (XFN) of the menu item.
  """
  linkRelationship: String

  """
  WP ID of the menu item.
  """
  menuItemId: Int

  """
  Target attribute for the menu item link.
  """
  target: String

  """
  Title attribute for the menu item link
  """
  title: String

  """
  URL or destination of the menu item.
  """
  url: String
}

union MenuItemObjectUnion = Post | Page | Category | Tag | Series | Issue | MenuItem

"""
Connection between the MenuItem type and the MenuItem type
"""
type MenuItemToMenuItemConnection {
  """
  Edges for the MenuItemToMenuItemConnection connection
  """
  edges: [MenuItemToMenuItemConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [MenuItem]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type MenuItemToMenuItemConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: MenuItem
}

"""
Arguments for filtering the MenuItemToMenuItemConnection connection
"""
input MenuItemToMenuItemConnectionWhereArgs {
  """
  The ID of the object
  """
  id: Int

  """
  The menu location for the menu being queried
  """
  location: MenuLocationEnum
}

"""
Registered menu locations
"""
enum MenuLocationEnum {
  HEADER_MENU
}

"""
Connection between the Menu type and the Menu type
"""
type MenuToMenuItemConnection {
  """
  Edges for the MenuToMenuItemConnection connection
  """
  edges: [MenuToMenuItemConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [MenuItem]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type MenuToMenuItemConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: MenuItem
}

"""
Arguments for filtering the MenuToMenuItemConnection connection
"""
input MenuToMenuItemConnectionWhereArgs {
  """
  The ID of the object
  """
  id: Int

  """
  The menu location for the menu being queried
  """
  location: MenuLocationEnum
}

"""
The MimeType of the object
"""
enum MimeTypeEnum {
  APPLICATION_JAVA
  APPLICATION_MSWORD
  APPLICATION_OCTET_STREAM
  APPLICATION_ONENOTE
  APPLICATION_OXPS
  APPLICATION_PDF
  APPLICATION_RAR
  APPLICATION_RTF
  APPLICATION_TTAF_XML
  APPLICATION_VND_APPLE_KEYNOTE
  APPLICATION_VND_APPLE_NUMBERS
  APPLICATION_VND_APPLE_PAGES
  APPLICATION_VND_MS_ACCESS
  APPLICATION_VND_MS_EXCEL
  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12
  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT
  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12
  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_PROJECT
  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12
  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12
  APPLICATION_VND_MS_WRITE
  APPLICATION_VND_MS_XPSDOCUMENT
  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART
  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE
  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA
  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS
  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION
  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET
  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE
  APPLICATION_WORDPERFECT
  APPLICATION_X_7Z_COMPRESSED
  APPLICATION_X_GZIP
  APPLICATION_X_TAR
  APPLICATION_ZIP
  AUDIO_AAC
  AUDIO_FLAC
  AUDIO_MIDI
  AUDIO_MPEG
  AUDIO_OGG
  AUDIO_WAV
  AUDIO_X_MATROSKA
  AUDIO_X_MS_WAX
  AUDIO_X_MS_WMA
  AUDIO_X_REALAUDIO
  IMAGE_BMP
  IMAGE_GIF
  IMAGE_JPEG
  IMAGE_PNG
  IMAGE_TIFF
  IMAGE_X_ICON
  TEXT_CALENDAR
  TEXT_CSS
  TEXT_CSV
  TEXT_PLAIN
  TEXT_RICHTEXT
  TEXT_TAB_SEPARATED_VALUES
  TEXT_VTT
  VIDEO_3GPP
  VIDEO_3GPP2
  VIDEO_AVI
  VIDEO_DIVX
  VIDEO_MP4
  VIDEO_MPEG
  VIDEO_OGG
  VIDEO_QUICKTIME
  VIDEO_WEBM
  VIDEO_X_FLV
  VIDEO_X_MATROSKA
  VIDEO_X_MS_ASF
  VIDEO_X_MS_WM
  VIDEO_X_MS_WMV
  VIDEO_X_MS_WMX
}

"""
An object with an ID
"""
interface Node {
  id: ID!
}

"""
The cardinality of the connection order
"""
enum OrderEnum {
  ASC
  DESC
}

"""
The page type
"""
type Page implements Node & BlocksPost {
  """
  Ancestors of the object
  """
  ancestors(
    """
    The types of ancestors to check for. Defaults to the same type as the current object
    """
    types: [PostTypeEnum]
  ): [PostObjectUnion]

  """
  The author field will return a queryable User type matching the post&#039;s author.
  """
  author: User

  """
  Gutenberg blocks
  """
  blocks(json: String): [Block]

  """
  Gutenberg blocks as json string
  """
  blocksJSON: BlockJsonArray

  """
  Connection between the page type and the page type
  """
  childPages(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: PageToPageConnectionWhereArgs
  ): PageToPageConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """
  Whether the comments are open or closed for this particular post.
  """
  commentStatus: String

  """
  Connection between the page type and the page type
  """
  comments(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: PageToCommentConnectionWhereArgs
  ): PageToCommentConnection

  """
  The content of the post.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  Post publishing date.
  """
  date: String

  """
  The publishing date set in GMT.
  """
  dateGmt: String

  """
  The desired slug of the post
  """
  desiredSlug: String

  """
  The user that most recently edited the object
  """
  editLast: User

  """
  If a user has edited the object within the past 15 seconds, this will return
  the user and the time they last edited. Null if the edit lock doesn&#039;t
  exist or is greater than 15 seconds
  """
  editLock: EditLock

  """
  The RSS enclosure for the object
  """
  enclosure: String

  """
  The excerpt of the post.
  """
  excerpt(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  The featured image for the object
  """
  featuredImage: MediaItem

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """
  The globally unique ID for the object
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  The permalink of the post
  """
  link: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """
  The id field matches the WP_Post-&gt;ID field.
  """
  pageId: Int!

  """
  The parent of the object. The parent object can be of various types
  """
  parent: PostObjectUnion

  """
  Whether the pings are open or closed for this particular post.
  """
  pingStatus: String

  """
  URLs that have been pinged.
  """
  pinged: [String]

  """
  Connection between the page type and the page type
  """
  revisions(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: PageToRevisionConnectionWhereArgs
  ): PageToRevisionConnection

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """
  The current status of the object
  """
  status: String

  """
  Terms connected to the page
  """
  termNames(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [String]

  """
  Terms connected to the page
  """
  termSlugs(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [String]

  """
  Terms connected to the page
  """
  terms(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [TermObjectUnion]

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  URLs queued to be pinged.
  """
  toPing: [String]

  """
  URI path for the resource
  """
  uri: String
}

"""
Connection between the page type and the page type
"""
type PageToCommentConnection {
  """
  Edges for the PageToCommentConnection connection
  """
  edges: [PageToCommentConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type PageToCommentConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Comment
}

"""
Arguments for filtering the PageToCommentConnection connection
"""
input PageToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String

  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]

  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]

  """
  Comment author URL.
  """
  authorUrl: String

  """
  Array of comment IDs to include.
  """
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """
  Include comments of a given type.
  """
  commentType: String

  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]

  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String

  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]

  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]

  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """
  Content object name to retrieve affiliated comments for.
  """
  contentName: String

  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for.
  							Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [PostTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """
  Karma score to retrieve matching comments for.
  """
  karma: Int

  """
  The cardinality of the order of the connection
  """
  order: OrderEnum

  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum

  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int

  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """
  Search term(s) to retrieve matching comments for.
  """
  search: String

  """
  Comment status to limit results by.
  """
  status: String

  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Connection between the page type and the page type
"""
type PageToPageConnection {
  """
  Edges for the PageToPageConnection connection
  """
  edges: [PageToPageConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Page]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type PageToPageConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Page
}

"""
Arguments for filtering the PageToPageConnection connection
"""
input PageToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the page type and the page type
"""
type PageToRevisionConnection {
  """
  Edges for the PageToRevisionConnection connection
  """
  edges: [PageToRevisionConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Revision]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type PageToRevisionConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Revision
}

"""
Arguments for filtering the PageToRevisionConnection connection
"""
input PageToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
An plugin object
"""
type Plugin implements Node {
  """
  Name of the plugin author(s), may also be a company name.
  """
  author: String

  """
  URI for the related author(s)/company website.
  """
  authorUri: String

  """
  Description of the plugin.
  """
  description: String
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  Display name of the plugin.
  """
  name: String

  """
  URI for the plugin website. This is useful for directing users for support requests etc.
  """
  pluginUri: String

  """
  Current version of the plugin.
  """
  version: String
}

"""
The post type
"""
type Post implements Node & BlocksPost {
  """
  List of coAuthors
  """
  coAuthors: [CoAuthor]

  """
  Connection between the post type and the post type
  """
  issues(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: PostToIssueConnectionWhereArgs
  ): PostToIssueConnection

  """
  Connection between the post type and the post type
  """
  seriesN(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: PostToSeriesConnectionWhereArgs
  ): PostToSeriesConnection

  """
  Ancestors of the object
  """
  ancestors(
    """
    The types of ancestors to check for. Defaults to the same type as the current object
    """
    types: [PostTypeEnum]
  ): [PostObjectUnion]

  """
  The author field will return a queryable User type matching the post&#039;s author.
  """
  author: User

  """
  Gutenberg blocks
  """
  blocks(json: String): [Block]

  """
  Gutenberg blocks as json string
  """
  blocksJSON: BlockJsonArray

  """
  Connection between the post type and the post type
  """
  categories(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: PostToCategoryConnectionWhereArgs
  ): PostToCategoryConnection

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """
  Whether the comments are open or closed for this particular post.
  """
  commentStatus: String

  """
  Connection between the post type and the post type
  """
  comments(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: PostToCommentConnectionWhereArgs
  ): PostToCommentConnection

  """
  The content of the post.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  Post publishing date.
  """
  date: String

  """
  The publishing date set in GMT.
  """
  dateGmt: String

  """
  The desired slug of the post
  """
  desiredSlug: String

  """
  The user that most recently edited the object
  """
  editLast: User

  """
  If a user has edited the object within the past 15 seconds, this will return
  the user and the time they last edited. Null if the edit lock doesn&#039;t
  exist or is greater than 15 seconds
  """
  editLock: EditLock

  """
  The RSS enclosure for the object
  """
  enclosure: String

  """
  The excerpt of the post.
  """
  excerpt(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  The featured image for the object
  """
  featuredImage: MediaItem

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """
  The globally unique ID for the object
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  The permalink of the post
  """
  link: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """
  The parent of the object. The parent object can be of various types
  """
  parent: PostObjectUnion

  """
  Whether the pings are open or closed for this particular post.
  """
  pingStatus: String

  """
  URLs that have been pinged.
  """
  pinged: [String]

  """
  The id field matches the WP_Post-&gt;ID field.
  """
  postId: Int!

  """
  Connection between the post type and the post type
  """
  revisions(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: PostToRevisionConnectionWhereArgs
  ): PostToRevisionConnection

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """
  The current status of the object
  """
  status: String

  """
  Connection between the post type and the post type
  """
  tags(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: PostToTagConnectionWhereArgs
  ): PostToTagConnection

  """
  Terms connected to the post
  """
  termNames(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [String]

  """
  Terms connected to the post
  """
  termSlugs(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [String]

  """
  Terms connected to the post
  """
  terms(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [TermObjectUnion]

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  URLs queued to be pinged.
  """
  toPing: [String]

  """
  URI path for the resource
  """
  uri: String
}

"""
Set relationships between the post to categories
"""
input PostCategoriesInput {
  """
  If true, this will append the category to existing related categories. If
  false, this will replace existing relationships. Default true.
  """
  append: Boolean
  nodes: [PostCategoriesNodeInput]
}

"""
List of categories to connect the post to. If an ID is set, it will be used to
create the connection. If not, it will look for a slug. If neither are valid
existing terms, and the site is configured to allow terms to be created during
post mutations, a term will be created using the Name if it exists in the input,
then fallback to the slug if it exists.
"""
input PostCategoriesNodeInput {
  """
  The description of the category. This field is used to set a description of
  the category if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the category. If present, this will be used to connect to the post.
  If no existing category exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the category. This field is used to create a new term, if term
  creation is enabled in nested mutations, and if one does not already exist
  with the provided slug or ID or if a slug or ID is not provided. If no name is
  included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the category. If no ID is present, this field will be used to make
  a connection. If no existing term exists with this slug, this field will be
  used as a fallback to the Name field when creating a new term to connect to,
  if term creation is enabled as a nested mutation.
  """
  slug: String
}

"""
Set relationships between the post to Issues
"""
input PostIssuesInput {
  """
  If true, this will append the Issue to existing related Issues. If false, this
  will replace existing relationships. Default true.
  """
  append: Boolean
  nodes: [PostIssuesNodeInput]
}

"""
List of Issues to connect the post to. If an ID is set, it will be used to
create the connection. If not, it will look for a slug. If neither are valid
existing terms, and the site is configured to allow terms to be created during
post mutations, a term will be created using the Name if it exists in the input,
then fallback to the slug if it exists.
"""
input PostIssuesNodeInput {
  """
  The description of the Issue. This field is used to set a description of the
  Issue if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the Issue. If present, this will be used to connect to the post. If
  no existing Issue exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the Issue. This field is used to create a new term, if term
  creation is enabled in nested mutations, and if one does not already exist
  with the provided slug or ID or if a slug or ID is not provided. If no name is
  included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the Issue. If no ID is present, this field will be used to make a
  connection. If no existing term exists with this slug, this field will be used
  as a fallback to the Name field when creating a new term to connect to, if
  term creation is enabled as a nested mutation.
  """
  slug: String
}

"""
The format of post field data.
"""
enum PostObjectFieldFormatEnum {
  """
  Provide the field value directly from database
  """
  RAW

  """
  Apply the default WordPress rendering
  """
  RENDERED
}

"""
The column to use when filtering by date
"""
enum PostObjectsConnectionDateColumnEnum {
  DATE
  MODIFIED
}

"""
Field to order the connection by
"""
enum PostObjectsConnectionOrderbyEnum {
  """
  Order by author
  """
  AUTHOR

  """
  Order by publish date
  """
  DATE

  """
  Preserve the ID order given in the IN array
  """
  IN

  """
  Order by the menu order value
  """
  MENU_ORDER

  """
  Order by last modified date
  """
  MODIFIED

  """
  Preserve slug order given in the NAME_IN array
  """
  NAME_IN

  """
  Order by parent ID
  """
  PARENT

  """
  Order by slug
  """
  SLUG

  """
  Order by title
  """
  TITLE
}

"""
Options for ordering the connection
"""
input PostObjectsConnectionOrderbyInput {
  field: PostObjectsConnectionOrderbyEnum!
  order: OrderEnum
}

union PostObjectTypesWithBlocksUnion = Post | Page

union PostObjectUnion = Post | Page | MediaItem | Revision

"""
Set relationships between the post to SeriesN
"""
input PostSeriesNInput {
  """
  If true, this will append the Series to existing related SeriesN. If false,
  this will replace existing relationships. Default true.
  """
  append: Boolean
  nodes: [PostSeriesNNodeInput]
}

"""
List of SeriesN to connect the post to. If an ID is set, it will be used to
create the connection. If not, it will look for a slug. If neither are valid
existing terms, and the site is configured to allow terms to be created during
post mutations, a term will be created using the Name if it exists in the input,
then fallback to the slug if it exists.
"""
input PostSeriesNNodeInput {
  """
  The description of the Series. This field is used to set a description of the
  Series if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the Series. If present, this will be used to connect to the post. If
  no existing Series exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the Series. This field is used to create a new term, if term
  creation is enabled in nested mutations, and if one does not already exist
  with the provided slug or ID or if a slug or ID is not provided. If no name is
  included and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the Series. If no ID is present, this field will be used to make a
  connection. If no existing term exists with this slug, this field will be used
  as a fallback to the Name field when creating a new term to connect to, if
  term creation is enabled as a nested mutation.
  """
  slug: String
}

"""
The status of the object.
"""
enum PostStatusEnum {
  """
  Objects with the acf-disabled status
  """
  ACF_DISABLED

  """
  Objects with the auto-draft status
  """
  AUTO_DRAFT

  """
  Objects with the draft status
  """
  DRAFT

  """
  Objects with the future status
  """
  FUTURE

  """
  Objects with the inherit status
  """
  INHERIT

  """
  Objects with the pending status
  """
  PENDING

  """
  Objects with the private status
  """
  PRIVATE

  """
  Objects with the publish status
  """
  PUBLISH

  """
  Objects with the request-completed status
  """
  REQUEST_COMPLETED

  """
  Objects with the request-confirmed status
  """
  REQUEST_CONFIRMED

  """
  Objects with the request-failed status
  """
  REQUEST_FAILED

  """
  Objects with the request-pending status
  """
  REQUEST_PENDING

  """
  Objects with the trash status
  """
  TRASH
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type PostsWithBlocksConnection {
  """
  Edges for the PostsWithBlocksConnection connection
  """
  edges: [PostsWithBlocksConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [BlocksPost]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type PostsWithBlocksConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: BlocksPost
}

"""
Set relationships between the post to tags
"""
input PostTagsInput {
  """
  If true, this will append the tag to existing related tags. If false, this
  will replace existing relationships. Default true.
  """
  append: Boolean
  nodes: [PostTagsNodeInput]
}

"""
List of tags to connect the post to. If an ID is set, it will be used to create
the connection. If not, it will look for a slug. If neither are valid existing
terms, and the site is configured to allow terms to be created during post
mutations, a term will be created using the Name if it exists in the input, then
fallback to the slug if it exists.
"""
input PostTagsNodeInput {
  """
  The description of the tag. This field is used to set a description of the tag
  if a new one is created during the mutation.
  """
  description: String

  """
  The ID of the tag. If present, this will be used to connect to the post. If no
  existing tag exists with this ID, no connection will be made.
  """
  id: ID

  """
  The name of the tag. This field is used to create a new term, if term creation
  is enabled in nested mutations, and if one does not already exist with the
  provided slug or ID or if a slug or ID is not provided. If no name is included
  and a term is created, the creation will fallback to the slug field.
  """
  name: String

  """
  The slug of the tag. If no ID is present, this field will be used to make a
  connection. If no existing term exists with this slug, this field will be used
  as a fallback to the Name field when creating a new term to connect to, if
  term creation is enabled as a nested mutation.
  """
  slug: String
}

"""
Connection between the post type and the post type
"""
type PostToCategoryConnection {
  """
  Edges for the PostToCategoryConnection connection
  """
  edges: [PostToCategoryConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Category]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type PostToCategoryConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Category
}

"""
Arguments for filtering the PostToCategoryConnection connection
"""
input PostToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the post type and the post type
"""
type PostToCommentConnection {
  """
  Edges for the PostToCommentConnection connection
  """
  edges: [PostToCommentConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type PostToCommentConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Comment
}

"""
Arguments for filtering the PostToCommentConnection connection
"""
input PostToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String

  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]

  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]

  """
  Comment author URL.
  """
  authorUrl: String

  """
  Array of comment IDs to include.
  """
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """
  Include comments of a given type.
  """
  commentType: String

  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]

  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String

  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]

  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]

  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """
  Content object name to retrieve affiliated comments for.
  """
  contentName: String

  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for.
  							Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [PostTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """
  Karma score to retrieve matching comments for.
  """
  karma: Int

  """
  The cardinality of the order of the connection
  """
  order: OrderEnum

  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum

  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int

  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """
  Search term(s) to retrieve matching comments for.
  """
  search: String

  """
  Comment status to limit results by.
  """
  status: String

  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Connection between the post type and the post type
"""
type PostToIssueConnection {
  """
  Edges for the PostToIssueConnection connection
  """
  edges: [PostToIssueConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Issue]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type PostToIssueConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Issue
}

"""
Arguments for filtering the PostToIssueConnection connection
"""
input PostToIssueConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the post type and the post type
"""
type PostToRevisionConnection {
  """
  Edges for the PostToRevisionConnection connection
  """
  edges: [PostToRevisionConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Revision]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type PostToRevisionConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Revision
}

"""
Arguments for filtering the PostToRevisionConnection connection
"""
input PostToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the post type and the post type
"""
type PostToSeriesConnection {
  """
  Edges for the PostToSeriesConnection connection
  """
  edges: [PostToSeriesConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Series]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type PostToSeriesConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Series
}

"""
Arguments for filtering the PostToSeriesConnection connection
"""
input PostToSeriesConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the post type and the post type
"""
type PostToTagConnection {
  """
  Edges for the PostToTagConnection connection
  """
  edges: [PostToTagConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Tag]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type PostToTagConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Tag
}

"""
Arguments for filtering the PostToTagConnection connection
"""
input PostToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
An Post Type object
"""
type PostType implements Node {
  """
  Whether this content type should can be exported.
  """
  canExport: Boolean

  """
  List of Taxonomies connected to the Post Type
  """
  connectedTaxonomies(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [Taxonomy]

  """
  A list of Taxonomies associated with the post type
  """
  connectedTaxonomyNames(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [String]

  """
  Whether delete this type of content when the author of it is deleted from the system.
  """
  deleteWithUser: Boolean

  """
  Description of the content type.
  """
  description: String

  """
  Whether to exclude posts with this post type from front end search results.
  """
  excludeFromSearch: Boolean

  """
  The plural name of the post type within the GraphQL Schema.
  """
  graphqlPluralName: String

  """
  The singular name of the post type within the GraphQL Schema.
  """
  graphqlSingleName: String

  """
  Whether this content type should have archives. Content archives are generated by type and by date.
  """
  hasArchive: Boolean

  """
  Whether the post type is hierarchical, for example pages.
  """
  hierarchical: Boolean
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  Display name of the content type.
  """
  label: String

  """
  Details about the post type labels.
  """
  labels: PostTypeLabelDetails

  """
  The name of the icon file to display as a menu icon.
  """
  menuIcon: String

  """
  The position of this post type in the menu. Only applies if show_in_menu is true.
  """
  menuPosition: Int

  """
  The internal name of the post type. This should not be used for display purposes.
  """
  name: String

  """
  Whether a post type is intended for use publicly either via the admin
  interface or by front-end users. While the default settings of
  exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are
  inherited from public, each does not rely on this relationship and controls a
  very specific intention.
  """
  public: Boolean

  """
  Whether queries can be performed on the front end for the post type as part of parse_request().
  """
  publiclyQueryable: Boolean

  """
  Name of content type to diplay in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """
  The REST Controller class assigned to handling this content type.
  """
  restControllerClass: String

  """
  Makes this post type available via the admin bar.
  """
  showInAdminBar: Boolean

  """
  Whether to add the post type to the GraphQL Schema.
  """
  showInGraphql: Boolean

  """
  Where to show the post type in the admin menu. To work, $show_ui must be true.
  If true, the post type is shown in its own top level menu. If false, no menu
  is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot;
  or &quot;edit.php?post_type=page&quot;), the post type will be placed as a
  sub-menu of that.
  """
  showInMenu: Boolean

  """
  Makes this post type available for selection in navigation menus.
  """
  showInNavMenus: Boolean

  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing this post type in the admin.
  """
  showUi: Boolean
}

"""
Allowed Post Types
"""
enum PostTypeEnum {
  ATTACHMENT
  PAGE
  POST
  REVISION
}

"""
Details for labels of the PostType
"""
type PostTypeLabelDetails {
  """
  Default is ‘Add New’ for both hierarchical and non-hierarchical types.
  """
  addNew: String

  """
  Label for adding a new singular item.
  """
  addNewItem: String

  """
  Label to signify all items in a submenu link.
  """
  allItems: String

  """
  Label for archives in nav menus
  """
  archives: String

  """
  Label for the attributes meta box.
  """
  attributes: String

  """
  Label for editing a singular item.
  """
  editItem: String

  """
  Label for the Featured Image meta box title.
  """
  featuredImage: String

  """
  Label for the table views hidden heading.
  """
  filterItemsList: String

  """
  Label for the media frame button.
  """
  insertIntoItem: String

  """
  Label for the table hidden heading.
  """
  itemsList: String

  """
  Label for the table pagination hidden heading.
  """
  itemsListNavigation: String

  """
  Label for the menu name.
  """
  menuName: String

  """
  General name for the post type, usually plural.
  """
  name: String

  """
  Label for the new item page title.
  """
  newItem: String

  """
  Label used when no items are found.
  """
  notFound: String

  """
  Label used when no items are in the trash.
  """
  notFoundInTrash: String

  """
  Label used to prefix parents of hierarchical items.
  """
  parentItemColon: String

  """
  Label for removing the featured image.
  """
  removeFeaturedImage: String

  """
  Label for searching plural items.
  """
  searchItems: String

  """
  Label for setting the featured image.
  """
  setFeaturedImage: String

  """
  Name for one object of this post type.
  """
  singularName: String

  """
  Label for the media frame filter.
  """
  uploadedToThisItem: String

  """
  Label in the media frame for using a featured image.
  """
  useFeaturedImage: String

  """
  Label for viewing a singular item.
  """
  viewItem: String

  """
  Label for viewing post type archives.
  """
  viewItems: String
}

"""
The reading setting type
"""
type ReadingSettings {
  """
  Blog pages show at most.
  """
  postsPerPage: Int
}

"""
Input for the registerUser mutation
"""
input RegisterUserInput {
  """
  User's AOL IM account.
  """
  aim: String
  clientMutationId: String!

  """
  A string containing content about the user.
  """
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """
  A string containing the user's email address.
  """
  email: String

  """
  The user's first name.
  """
  firstName: String

  """
  User's Jabber account.
  """
  jabber: String

  """
  The user's last name.
  """
  lastName: String

  """
  User's locale.
  """
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """
  The user's nickname, defaults to the user's username.
  """
  nickname: String

  """
  A string that contains the plain text password for the user.
  """
  password: String

  """
  The date the user registered. Format is Y-m-d H:i:s.
  """
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """
  A string that contains the user's username.
  """
  username: String!

  """
  A string containing the user's URL for the user's web site.
  """
  websiteUrl: String

  """
  User's Yahoo IM account.
  """
  yim: String
}

"""
The payload for the registerUser mutation
"""
type RegisterUserPayload {
  clientMutationId: String!
  user: User
}

"""
The logical relation between each item in the array when there are more than one.
"""
enum RelationEnum {
  AND
  OR
}

"""
Input for the resetUserPassword mutation
"""
input ResetUserPasswordInput {
  clientMutationId: String!

  """
  Password reset key
  """
  key: String

  """
  The user's login (username).
  """
  login: String

  """
  The new password.
  """
  password: String
}

"""
The payload for the resetUserPassword mutation
"""
type ResetUserPasswordPayload {
  clientMutationId: String!
  user: User
}

"""
Input for the restoreComment mutation
"""
input RestoreCommentInput {
  clientMutationId: String!

  """
  The ID of the comment to be restored
  """
  id: ID!
}

"""
The payload for the restoreComment mutation
"""
type RestoreCommentPayload {
  clientMutationId: String!

  """
  The restored comment object
  """
  comment: Comment

  """
  The ID of the restored comment
  """
  restoredId: ID
}

"""
The revision type
"""
type Revision implements Node & BlocksPost {
  """
  Ancestors of the object
  """
  ancestors(
    """
    The types of ancestors to check for. Defaults to the same type as the current object
    """
    types: [PostTypeEnum]
  ): [PostObjectUnion]

  """
  The author field will return a queryable User type matching the post&#039;s author.
  """
  author: User

  """
  Gutenberg blocks
  """
  blocks(json: String): [Block]

  """
  Gutenberg blocks as json string
  """
  blocksJSON: BlockJsonArray

  """
  Whether the comments are open or closed for this particular post.
  """
  commentStatus: String

  """
  The content of the post.
  """
  content(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  Post publishing date.
  """
  date: String

  """
  The publishing date set in GMT.
  """
  dateGmt: String

  """
  The desired slug of the post
  """
  desiredSlug: String

  """
  The user that most recently edited the object
  """
  editLast: User

  """
  If a user has edited the object within the past 15 seconds, this will return
  the user and the time they last edited. Null if the edit lock doesn&#039;t
  exist or is greater than 15 seconds
  """
  editLock: EditLock

  """
  The RSS enclosure for the object
  """
  enclosure: String

  """
  The excerpt of the post.
  """
  excerpt(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  The global unique identifier for this post. This currently matches the value
  stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot;
  database table.
  """
  guid: String

  """
  The globally unique ID for the object
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  The permalink of the post
  """
  link: String

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  The local modified time for a post. If a post was recently updated the
  modified field will change to match the corresponding time.
  """
  modified: String

  """
  The GMT modified time for a post. If a post was recently updated the modified
  field will change to match the corresponding time in GMT.
  """
  modifiedGmt: String

  """
  The parent of the object. The parent object can be of various types
  """
  parent: PostObjectUnion

  """
  Whether the pings are open or closed for this particular post.
  """
  pingStatus: String

  """
  URLs that have been pinged.
  """
  pinged: [String]

  """
  The id field matches the WP_Post-&gt;ID field.
  """
  revisionId: Int!

  """
  The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name
  field and the post_name column in the database for the
  &quot;post_objects&quot; table.
  """
  slug: String

  """
  The current status of the object
  """
  status: String

  """
  Terms connected to the revision
  """
  termNames(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [String]

  """
  Terms connected to the revision
  """
  termSlugs(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [String]

  """
  Terms connected to the revision
  """
  terms(
    """
    Select which taxonomies to limit the results to
    """
    taxonomies: [TaxonomyEnum]
  ): [TermObjectUnion]

  """
  The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
  """
  title(
    """
    Format of the field output
    """
    format: PostObjectFieldFormatEnum
  ): String

  """
  URLs queued to be pinged.
  """
  toPing: [String]

  """
  URI path for the resource
  """
  uri: String
}

"""
The root mutation
"""
type RootMutation {
  """
  The payload for the UpdateCategory mutation
  """
  updateCategory(
    """
    Input for the UpdateCategory mutation
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """
  The payload for the UpdateIssue mutation
  """
  updateIssue(
    """
    Input for the UpdateIssue mutation
    """
    input: UpdateIssueInput!
  ): UpdateIssuePayload

  """
  The payload for the UpdateSeries mutation
  """
  updateSeries(
    """
    Input for the UpdateSeries mutation
    """
    input: UpdateSeriesInput!
  ): UpdateSeriesPayload

  """
  The payload for the UpdateTag mutation
  """
  updateTag(
    """
    Input for the UpdateTag mutation
    """
    input: UpdateTagInput!
  ): UpdateTagPayload

  """
  The payload for the createCategory mutation
  """
  createCategory(
    """
    Input for the createCategory mutation
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """
  The payload for the createComment mutation
  """
  createComment(
    """
    Input for the createComment mutation
    """
    input: CreateCommentInput!
  ): CreateCommentPayload

  """
  The payload for the createIssue mutation
  """
  createIssue(
    """
    Input for the createIssue mutation
    """
    input: CreateIssueInput!
  ): CreateIssuePayload

  """
  The payload for the createMediaItem mutation
  """
  createMediaItem(
    """
    Input for the createMediaItem mutation
    """
    input: CreateMediaItemInput!
  ): CreateMediaItemPayload

  """
  The payload for the createPage mutation
  """
  createPage(
    """
    Input for the createPage mutation
    """
    input: CreatePageInput!
  ): CreatePagePayload

  """
  The payload for the createPost mutation
  """
  createPost(
    """
    Input for the createPost mutation
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """
  The payload for the createSeries mutation
  """
  createSeries(
    """
    Input for the createSeries mutation
    """
    input: CreateSeriesInput!
  ): CreateSeriesPayload

  """
  The payload for the createTag mutation
  """
  createTag(
    """
    Input for the createTag mutation
    """
    input: CreateTagInput!
  ): CreateTagPayload

  """
  The payload for the createUser mutation
  """
  createUser(
    """
    Input for the createUser mutation
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """
  The payload for the deleteCategory mutation
  """
  deleteCategory(
    """
    Input for the deleteCategory mutation
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """
  The payload for the deleteComment mutation
  """
  deleteComment(
    """
    Input for the deleteComment mutation
    """
    input: DeleteCommentInput!
  ): DeleteCommentPayload

  """
  The payload for the deleteIssue mutation
  """
  deleteIssue(
    """
    Input for the deleteIssue mutation
    """
    input: DeleteIssueInput!
  ): DeleteIssuePayload

  """
  The payload for the deleteMediaItem mutation
  """
  deleteMediaItem(
    """
    Input for the deleteMediaItem mutation
    """
    input: DeleteMediaItemInput!
  ): DeleteMediaItemPayload

  """
  The payload for the deletePage mutation
  """
  deletePage(
    """
    Input for the deletePage mutation
    """
    input: DeletePageInput!
  ): DeletePagePayload

  """
  The payload for the deletePost mutation
  """
  deletePost(
    """
    Input for the deletePost mutation
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """
  The payload for the deleteRevision mutation
  """
  deleteRevision(
    """
    Input for the deleteRevision mutation
    """
    input: DeleteRevisionInput!
  ): DeleteRevisionPayload

  """
  The payload for the deleteSeries mutation
  """
  deleteSeries(
    """
    Input for the deleteSeries mutation
    """
    input: DeleteSeriesInput!
  ): DeleteSeriesPayload

  """
  The payload for the deleteTag mutation
  """
  deleteTag(
    """
    Input for the deleteTag mutation
    """
    input: DeleteTagInput!
  ): DeleteTagPayload

  """
  The payload for the deleteUser mutation
  """
  deleteUser(
    """
    Input for the deleteUser mutation
    """
    input: DeleteUserInput!
  ): DeleteUserPayload
  increaseCount(
    """
    The count to increase
    """
    count: Int
  ): Int

  """
  The payload for the registerUser mutation
  """
  registerUser(
    """
    Input for the registerUser mutation
    """
    input: RegisterUserInput!
  ): RegisterUserPayload

  """
  The payload for the resetUserPassword mutation
  """
  resetUserPassword(
    """
    Input for the resetUserPassword mutation
    """
    input: ResetUserPasswordInput!
  ): ResetUserPasswordPayload

  """
  The payload for the restoreComment mutation
  """
  restoreComment(
    """
    Input for the restoreComment mutation
    """
    input: RestoreCommentInput!
  ): RestoreCommentPayload

  """
  The payload for the sendPasswordResetEmail mutation
  """
  sendPasswordResetEmail(
    """
    Input for the sendPasswordResetEmail mutation
    """
    input: SendPasswordResetEmailInput!
  ): SendPasswordResetEmailPayload

  """
  The payload for the updateComment mutation
  """
  updateComment(
    """
    Input for the updateComment mutation
    """
    input: UpdateCommentInput!
  ): UpdateCommentPayload

  """
  The payload for the updateMediaItem mutation
  """
  updateMediaItem(
    """
    Input for the updateMediaItem mutation
    """
    input: UpdateMediaItemInput!
  ): UpdateMediaItemPayload

  """
  The payload for the updatePage mutation
  """
  updatePage(
    """
    Input for the updatePage mutation
    """
    input: UpdatePageInput!
  ): UpdatePagePayload

  """
  The payload for the updatePost mutation
  """
  updatePost(
    """
    Input for the updatePost mutation
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """
  The payload for the updateSettings mutation
  """
  updateSettings(
    """
    Input for the updateSettings mutation
    """
    input: UpdateSettingsInput!
  ): UpdateSettingsPayload

  """
  The payload for the updateUser mutation
  """
  updateUser(
    """
    Input for the updateUser mutation
    """
    input: UpdateUserInput!
  ): UpdateUserPayload
}

"""
The root entry point into the Graph
"""
type RootQuery {
  """
  A 0bject
  """
  issue(id: ID!): Issue

  """
  Connection between the RootQuery type and the RootQuery type
  """
  issues(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToIssueConnectionWhereArgs
  ): RootQueryToIssueConnection

  """
  A 0bject
  """
  series(id: ID!): Series

  """
  Connection between the RootQuery type and the RootQuery type
  """
  seriesN(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToSeriesConnectionWhereArgs
  ): RootQueryToSeriesConnection

  """
  Entry point to get all settings for the site
  """
  allSettings: Settings
  blocksBy(json: String): [Block]

  """
  Connection between the RootQuery type and the RootQuery type
  """
  categories(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToCategoryConnectionWhereArgs
  ): RootQueryToCategoryConnection

  """
  A 0bject
  """
  category(id: ID!): Category

  """
  Returns a Comment
  """
  comment(id: ID!): Comment

  """
  Connection between the RootQuery type and the RootQuery type
  """
  comments(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToCommentConnectionWhereArgs
  ): RootQueryToCommentConnection
  discussionSettings: DiscussionSettings
  generalSettings: GeneralSettings

  """
  A 0bject
  """
  mediaItem(id: ID!): MediaItem

  """
  A mediaItem object
  """
  mediaItemBy(
    """
    Get the object by its global ID
    """
    id: ID

    """
    Get the mediaItem by its database ID
    """
    mediaItemId: Int

    """
    Get the mediaItem by its uri
    """
    uri: String

    """
    Get the mediaItem by its slug (only available for non-hierarchical types)
    """
    slug: String
  ): MediaItem

  """
  Connection between the RootQuery type and the RootQuery type
  """
  mediaItems(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToMediaItemConnectionWhereArgs
  ): RootQueryToMediaItemConnection

  """
  A WordPress navigation menu
  """
  menu(id: ID!): Menu

  """
  A WordPress navigation menu item
  """
  menuItem(id: ID!): MenuItem

  """
  Connection between the RootQuery type and the RootQuery type
  """
  menuItems(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToMenuItemConnectionWhereArgs
  ): RootQueryToMenuItemConnection

  """
  Connection between the RootQuery type and the RootQuery type
  """
  menus(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToMenuConnectionWhereArgs
  ): RootQueryToMenuConnection

  """
  Fetches an object given its ID
  """
  node(
    """
    The id of the object
    """
    id: ID
  ): Node

  """
  A 0bject
  """
  page(id: ID!): Page

  """
  A page object
  """
  pageBy(
    """
    Get the object by its global ID
    """
    id: ID

    """
    Get the page by its database ID
    """
    pageId: Int

    """
    Get the page by its uri
    """
    uri: String
  ): Page

  """
  Connection between the RootQuery type and the RootQuery type
  """
  pages(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToPageConnectionWhereArgs
  ): RootQueryToPageConnection

  """
  A WordPress plugin
  """
  plugin(id: ID!): Plugin

  """
  Connection between the RootQuery type and the RootQuery type
  """
  plugins(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToPluginConnection

  """
  A 0bject
  """
  post(id: ID!): Post

  """
  A post object
  """
  postBy(
    """
    Get the object by its global ID
    """
    id: ID

    """
    Get the post by its database ID
    """
    postId: Int

    """
    Get the post by its uri
    """
    uri: String

    """
    Get the post by its slug (only available for non-hierarchical types)
    """
    slug: String
  ): Post

  """
  Connection between the RootQuery type and the RootQuery type
  """
  posts(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToPostConnectionWhereArgs
  ): RootQueryToPostConnection

  """
  Connection between the RootQuery type and the RootQuery type
  """
  postsWithBlocks(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): PostsWithBlocksConnection
  readingSettings: ReadingSettings

  """
  A 0bject
  """
  revision(id: ID!): Revision

  """
  A revision object
  """
  revisionBy(
    """
    Get the object by its global ID
    """
    id: ID

    """
    Get the revision by its database ID
    """
    revisionId: Int

    """
    Get the revision by its uri
    """
    uri: String

    """
    Get the revision by its slug (only available for non-hierarchical types)
    """
    slug: String
  ): Revision

  """
  Connection between the RootQuery type and the RootQuery type
  """
  revisions(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToRevisionConnectionWhereArgs
  ): RootQueryToRevisionConnection

  """
  A 0bject
  """
  tag(id: ID!): Tag

  """
  Connection between the RootQuery type and the RootQuery type
  """
  tags(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToTagConnectionWhereArgs
  ): RootQueryToTagConnection

  """
  A Theme object
  """
  theme(id: ID!): Theme

  """
  Connection between the RootQuery type and the RootQuery type
  """
  themes(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToThemeConnection

  """
  Returns a user
  """
  user(id: ID!): User

  """
  Returns a user role
  """
  userRole(id: ID!): UserRole

  """
  Connection between the RootQuery type and the RootQuery type
  """
  userRoles(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): RootQueryToUserRoleConnection

  """
  Connection between the RootQuery type and the RootQuery type
  """
  users(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: RootQueryToUserConnectionWhereArgs
  ): RootQueryToUserConnection

  """
  Returns the current user
  """
  viewer: User
  writingSettings: WritingSettings
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToCategoryConnection {
  """
  Edges for the RootQueryToCategoryConnection connection
  """
  edges: [RootQueryToCategoryConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Category]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type RootQueryToCategoryConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Category
}

"""
Arguments for filtering the RootQueryToCategoryConnection connection
"""
input RootQueryToCategoryConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToCommentConnection {
  """
  Edges for the RootQueryToCommentConnection connection
  """
  edges: [RootQueryToCommentConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type RootQueryToCommentConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Comment
}

"""
Arguments for filtering the RootQueryToCommentConnection connection
"""
input RootQueryToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String

  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]

  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]

  """
  Comment author URL.
  """
  authorUrl: String

  """
  Array of comment IDs to include.
  """
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """
  Include comments of a given type.
  """
  commentType: String

  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]

  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String

  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]

  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]

  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """
  Content object name to retrieve affiliated comments for.
  """
  contentName: String

  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for.
  							Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [PostTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """
  Karma score to retrieve matching comments for.
  """
  karma: Int

  """
  The cardinality of the order of the connection
  """
  order: OrderEnum

  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum

  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int

  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """
  Search term(s) to retrieve matching comments for.
  """
  search: String

  """
  Comment status to limit results by.
  """
  status: String

  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToIssueConnection {
  """
  Edges for the RootQueryToIssueConnection connection
  """
  edges: [RootQueryToIssueConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Issue]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type RootQueryToIssueConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Issue
}

"""
Arguments for filtering the RootQueryToIssueConnection connection
"""
input RootQueryToIssueConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToMediaItemConnection {
  """
  Edges for the RootQueryToMediaItemConnection connection
  """
  edges: [RootQueryToMediaItemConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [MediaItem]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type RootQueryToMediaItemConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: MediaItem
}

"""
Arguments for filtering the RootQueryToMediaItemConnection connection
"""
input RootQueryToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToMenuConnection {
  """
  Edges for the RootQueryToMenuConnection connection
  """
  edges: [RootQueryToMenuConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Menu]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type RootQueryToMenuConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Menu
}

"""
Arguments for filtering the RootQueryToMenuConnection connection
"""
input RootQueryToMenuConnectionWhereArgs {
  """
  The ID of the object
  """
  id: Int

  """
  The menu location for the menu being queried
  """
  location: MenuLocationEnum

  """
  The slug of the menu to query items for
  """
  slug: String
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToMenuItemConnection {
  """
  Edges for the RootQueryToMenuItemConnection connection
  """
  edges: [RootQueryToMenuItemConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [MenuItem]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type RootQueryToMenuItemConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: MenuItem
}

"""
Arguments for filtering the RootQueryToMenuItemConnection connection
"""
input RootQueryToMenuItemConnectionWhereArgs {
  """
  The ID of the object
  """
  id: Int

  """
  The menu location for the menu being queried
  """
  location: MenuLocationEnum
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToPageConnection {
  """
  Edges for the RootQueryToPageConnection connection
  """
  edges: [RootQueryToPageConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Page]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type RootQueryToPageConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Page
}

"""
Arguments for filtering the RootQueryToPageConnection connection
"""
input RootQueryToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToPluginConnection {
  """
  Edges for the RootQueryToPluginConnection connection
  """
  edges: [RootQueryToPluginConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Plugin]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type RootQueryToPluginConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Plugin
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToPostConnection {
  """
  Edges for the RootQueryToPostConnection connection
  """
  edges: [RootQueryToPostConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Post]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type RootQueryToPostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Post
}

"""
Arguments for filtering the RootQueryToPostConnection connection
"""
input RootQueryToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToRevisionConnection {
  """
  Edges for the RootQueryToRevisionConnection connection
  """
  edges: [RootQueryToRevisionConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Revision]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type RootQueryToRevisionConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Revision
}

"""
Arguments for filtering the RootQueryToRevisionConnection connection
"""
input RootQueryToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToSeriesConnection {
  """
  Edges for the RootQueryToSeriesConnection connection
  """
  edges: [RootQueryToSeriesConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Series]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type RootQueryToSeriesConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Series
}

"""
Arguments for filtering the RootQueryToSeriesConnection connection
"""
input RootQueryToSeriesConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToTagConnection {
  """
  Edges for the RootQueryToTagConnection connection
  """
  edges: [RootQueryToTagConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Tag]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type RootQueryToTagConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Tag
}

"""
Arguments for filtering the RootQueryToTagConnection connection
"""
input RootQueryToTagConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToThemeConnection {
  """
  Edges for the RootQueryToThemeConnection connection
  """
  edges: [RootQueryToThemeConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Theme]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type RootQueryToThemeConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Theme
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToUserConnection {
  """
  Edges for the RootQueryToUserConnection connection
  """
  edges: [RootQueryToUserConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [User]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type RootQueryToUserConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: User
}

"""
Arguments for filtering the RootQueryToUserConnection connection
"""
input RootQueryToUserConnectionWhereArgs {
  """
  Array of userIds to exclude.
  """
  exclude: [Int]

  """
  Pass an array of post types to filter results to users who have published posts in those post types.
  """
  hasPublishedPosts: [PostTypeEnum]

  """
  Array of userIds to include.
  """
  include: [Int]

  """
  The user login.
  """
  login: String

  """
  An array of logins to include. Users matching one of these logins will be included in results.
  """
  loginIn: Int

  """
  An array of logins to exclude. Users matching one of these logins will not be included in results.
  """
  loginNotIn: Int

  """
  The user nicename.
  """
  nicename: String

  """
  An array of nicenames to include. Users matching one of these nicenames will be included in results.
  """
  nicenameIn: [String]

  """
  An array of nicenames to exclude. Users matching one of these nicenames will not be included in results.
  """
  nicenameNotIn: [String]

  """
  What paramater to use to order the objects by.
  """
  orderby: [UsersConnectionOrderbyInput]

  """
  An array of role names that users must match to be included in results. Note
  that this is an inclusive list: users must match *each* role.
  """
  role: UserRoleEnum

  """
  An array of role names. Matched users must have at least one of these roles.
  """
  roleIn: [UserRoleEnum]

  """
  An array of role names to exclude. Users matching one or more of these roles will not be included in results.
  """
  roleNotIn: [UserRoleEnum]

  """
  Search keyword. Searches for possible string matches on columns. When
  "searchColumns" is left empty, it tries to determine which column to search in
  based on search string.
  """
  search: String

  """
  Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'.
  """
  searchColumns: [String]
}

"""
Connection between the RootQuery type and the RootQuery type
"""
type RootQueryToUserRoleConnection {
  """
  Edges for the RootQueryToUserRoleConnection connection
  """
  edges: [RootQueryToUserRoleConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [UserRole]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type RootQueryToUserRoleConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: UserRole
}

"""
Input for the sendPasswordResetEmail mutation
"""
input SendPasswordResetEmailInput {
  clientMutationId: String!

  """
  A string that contains the user's username or email address.
  """
  username: String!
}

"""
The payload for the sendPasswordResetEmail mutation
"""
type SendPasswordResetEmailPayload {
  clientMutationId: String!

  """
  The user that the password reset email was sent to
  """
  user: User
}

"""
The Series type
"""
type Series implements Node {
  """
  The id field matches the WP_Post-&gt;ID field.
  """
  seriesId: Int

  """
  The ancestors of the object
  """
  ancestors: [Series]

  """
  Connection between the Series type and the Series type
  """
  children(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: SeriesToSeriesConnectionWhereArgs
  ): SeriesToSeriesConnection

  """
  The number of objects connected to the object
  """
  count: Int

  """
  The description of the object
  """
  description: String

  """
  The global ID for the series
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  The link to the term
  """
  link: String

  """
  The human friendly name of the object.
  """
  name: String

  """
  The parent object
  """
  parent: Series

  """
  Connection between the Series type and the Series type
  """
  posts(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: SeriesToPostConnectionWhereArgs
  ): SeriesToPostConnection

  """
  An alphanumeric identifier for the object unique to its type.
  """
  slug: String

  """
  The name of the taxonomy this term belongs to
  """
  taxonomy: Taxonomy

  """
  The ID of the term group that this term object belongs to
  """
  termGroupId: Int

  """
  The taxonomy ID that the object is associated with
  """
  termTaxonomyId: Int
}

"""
Connection between the Series type and the Series type
"""
type SeriesToPostConnection {
  """
  Edges for the SeriesToPostConnection connection
  """
  edges: [SeriesToPostConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Post]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type SeriesToPostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Post
}

"""
Arguments for filtering the SeriesToPostConnection connection
"""
input SeriesToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the Series type and the Series type
"""
type SeriesToSeriesConnection {
  """
  Edges for the SeriesToSeriesConnection connection
  """
  edges: [SeriesToSeriesConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Series]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  taxonomyInfo: Taxonomy
}

"""
An edge in a connection
"""
type SeriesToSeriesConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Series
}

"""
Arguments for filtering the SeriesToSeriesConnection connection
"""
input SeriesToSeriesConnectionWhereArgs {
  """
  Unique cache key to be produced when this query is stored in an object cache. Default is 'core'.
  """
  cacheDomain: String

  """
  Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0.
  """
  childOf: Int

  """
  True to limit results to terms that have no children. This parameter has no
  effect on non-hierarchical taxonomies. Default false.
  """
  childless: Boolean

  """
  Retrieve terms where the description is LIKE the input value. Default empty.
  """
  descriptionLike: String

  """
  Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array.
  """
  exclude: [ID]

  """
  Array of term ids to exclude along with all of their descendant terms. If
  $include is non-empty, $exclude_tree is ignored. Default empty array.
  """
  excludeTree: [ID]

  """
  Whether to hide terms not assigned to any posts. Accepts true or false. Default false
  """
  hideEmpty: Boolean

  """
  Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true.
  """
  hierarchical: Boolean

  """
  Array of term ids to include. Default empty array.
  """
  include: [ID]

  """
  Array of names to return term(s) for. Default empty.
  """
  name: [String]

  """
  Retrieve terms where the name is LIKE the input value. Default empty.
  """
  nameLike: String

  """
  Array of object IDs. Results will be limited to terms associated with these objects.
  """
  objectIds: [ID]

  """
  Field(s) to order terms by. Defaults to 'name'.
  """
  orderby: TermObjectsConnectionOrderbyEnum

  """
  Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false.
  """
  padCounts: Boolean

  """
  Parent term ID to retrieve direct-child terms of. Default empty.
  """
  parent: Int

  """
  Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty.
  """
  search: String

  """
  Default false. If true, only the items connected to the source item will be
  returned. If false, all items will be returned regardless of connection to the source
  """
  shouldOnlyIncludeConnectedItems: Boolean

  """
  Default false. If true, the connection will be output in a flat list instead
  of the hierarchical list. So child terms will be output in the same level as
  the parent terms
  """
  shouldOutputInFlatList: Boolean

  """
  Array of slugs to return term(s) for. Default empty.
  """
  slug: [String]

  """
  Array of term taxonomy IDs, to match when querying terms.
  """
  termTaxonomId: [ID]

  """
  Whether to prime meta caches for matched terms. Default true.
  """
  updateTermMetaCache: Boolean
}

"""
All of the registered settings
"""
type Settings {
  """
  Allow people to submit comments on new posts.
  """
  discussionSettingsDefaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  discussionSettingsDefaultPingStatus: String

  """
  A date format for all date strings.
  """
  generalSettingsDateFormat: String

  """
  Site tagline.
  """
  generalSettingsDescription: String

  """
  This address is used for admin purposes, like new user notification.
  """
  generalSettingsEmail: String

  """
  WordPress locale code.
  """
  generalSettingsLanguage: String

  """
  A day number of the week that the week should start on.
  """
  generalSettingsStartOfWeek: Int

  """
  A time format for all time strings.
  """
  generalSettingsTimeFormat: String

  """
  A city in the same timezone as you.
  """
  generalSettingsTimezone: String

  """
  Site title.
  """
  generalSettingsTitle: String

  """
  Site URL.
  """
  generalSettingsUrl: String

  """
  Blog pages show at most.
  """
  readingSettingsPostsPerPage: Int

  """
  Default post category.
  """
  writingSettingsDefaultCategory: Int

  """
  Default post format.
  """
  writingSettingsDefaultPostFormat: String

  """
  Convert emoticons like :-) and :-P to graphics on display.
  """
  writingSettingsUseSmilies: Boolean
}

"""
The tag type
"""
type Tag implements Node {
  """
  The number of objects connected to the object
  """
  count: Int

  """
  The description of the object
  """
  description: String

  """
  The global ID for the post_tag
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  The link to the term
  """
  link: String

  """
  The human friendly name of the object.
  """
  name: String

  """
  Connection between the tag type and the tag type
  """
  posts(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: TagToPostConnectionWhereArgs
  ): TagToPostConnection

  """
  An alphanumeric identifier for the object unique to its type.
  """
  slug: String

  """
  The id field matches the WP_Post-&gt;ID field.
  """
  tagId: Int

  """
  The name of the taxonomy this term belongs to
  """
  taxonomy: Taxonomy

  """
  The ID of the term group that this term object belongs to
  """
  termGroupId: Int

  """
  The taxonomy ID that the object is associated with
  """
  termTaxonomyId: Int
}

"""
Connection between the tag type and the tag type
"""
type TagToPostConnection {
  """
  Edges for the TagToPostConnection connection
  """
  edges: [TagToPostConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Post]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type TagToPostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Post
}

"""
Arguments for filtering the TagToPostConnection connection
"""
input TagToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
A taxonomy object
"""
type Taxonomy implements Node {
  """
  A list of Post Types associated with the taxonomy
  """
  connectedPostTypeNames(
    """
    Select which post types to limit the results to
    """
    types: [PostTypeEnum]
  ): [String]

  """
  List of Post Types connected to the Taxonomy
  """
  connectedPostTypes(
    """
    Select which post types to limit the results to
    """
    types: [PostTypeEnum]
  ): [PostType]

  """
  Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description
  """
  description: String

  """
  The plural name of the post type within the GraphQL Schema.
  """
  graphqlPluralName: String

  """
  The singular name of the post type within the GraphQL Schema.
  """
  graphqlSingleName: String

  """
  Whether the taxonomy is hierarchical
  """
  hierarchical: Boolean
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  Name of the taxonomy shown in the menu. Usually plural.
  """
  label: String

  """
  The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label
  """
  name: String

  """
  Whether the taxonomy is publicly queryable
  """
  public: Boolean

  """
  Name of content type to diplay in REST API &quot;wp/v2&quot; namespace.
  """
  restBase: String

  """
  The REST Controller class assigned to handling this content type.
  """
  restControllerClass: String

  """
  Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud
  """
  showCloud: Boolean

  """
  Whether to display a column for the taxonomy on its post type listing screens.
  """
  showInAdminColumn: Boolean

  """
  Whether to add the post type to the GraphQL Schema.
  """
  showInGraphql: Boolean

  """
  Whether to show the taxonomy in the admin menu
  """
  showInMenu: Boolean

  """
  Whether the taxonomy is available for selection in navigation menus.
  """
  showInNavMenus: Boolean

  """
  Whether to show the taxonomy in the quick/bulk edit panel.
  """
  showInQuickEdit: Boolean

  """
  Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
  """
  showInRest: Boolean

  """
  Whether to generate and allow a UI for managing terms in this taxonomy in the admin
  """
  showUi: Boolean
}

"""
Allowed taxonomies
"""
enum TaxonomyEnum {
  CATEGORY
  ISSUE
  SERIES
  TAG
}

"""
Options for ordering the connection by
"""
enum TermObjectsConnectionOrderbyEnum {
  COUNT
  DESCRIPTION
  NAME
  SLUG
  TERM_GROUP
  TERM_ID
  TERM_ORDER
}

union TermObjectUnion = Category | Tag | Series | Issue

"""
A theme object
"""
type Theme implements Node {
  """
  Name of the theme author(s), could also be a company name. This field is
  equivalent to WP_Theme-&gt;get( &quot;Author&quot; ).
  """
  author: String

  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ).
  """
  authorUri: String

  """
  The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ).
  """
  description: String
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ).
  """
  name: String

  """
  The URL of the screenshot for the theme. The screenshot is intended to give an
  overview of what the theme looks like. This field is equivalent to
  WP_Theme-&gt;get_screenshot().
  """
  screenshot: String

  """
  The theme slug is used to internally match themes. Theme slugs can have
  subdirectories like: my-theme/sub-theme. This field is equivalent to
  WP_Theme-&gt;get_stylesheet().
  """
  slug: String

  """
  URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ).
  """
  tags: [String]

  """
  A URI if the theme has a website associated with it. The Theme URI is handy
  for directing users to a theme site for support etc. This field is equivalent
  to WP_Theme-&gt;get( &quot;ThemeURI&quot; ).
  """
  themeUri: String

  """
  The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ).
  """
  version: Float
}

"""
Input for the UpdateCategory mutation
"""
input UpdateCategoryInput {
  """
  The slug that the category will be an alias of
  """
  aliasOf: String
  clientMutationId: String!

  """
  The description of the category object
  """
  description: String

  """
  The ID of the category object to update
  """
  id: ID!

  """
  The name of the category object to mutate
  """
  name: String

  """
  The ID of the category that should be set as the parent
  """
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the UpdateCategory mutation
"""
type UpdateCategoryPayload {
  """
  The created category
  """
  category: Category
  clientMutationId: String!
}

"""
Input for the updateComment mutation
"""
input UpdateCommentInput {
  """
  User agent used to post the comment.
  """
  agent: String

  """
  The approval status of the comment.
  """
  approved: String

  """
  The name of the comment's author.
  """
  author: String

  """
  The email of the comment's author.
  """
  authorEmail: String

  """
  IP address for the comment's author.
  """
  authorIp: String

  """
  The url of the comment's author.
  """
  authorUrl: String
  clientMutationId: String!

  """
  The ID of the post object the comment belongs to.
  """
  commentOn: Int

  """
  Content of the comment.
  """
  content: String

  """
  The date of the object. Preferable to enter as year/month/day ( e.g.
  01/31/2017 ) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """
  The ID of the comment being updated.
  """
  id: ID!

  """
  Parent comment of current comment.
  """
  parent: ID

  """
  Type of comment.
  """
  type: String

  """
  The userID of the comment's author.
  """
  userId: Int
}

"""
The payload for the updateComment mutation
"""
type UpdateCommentPayload {
  clientMutationId: String!

  """
  The comment that was created
  """
  comment: Comment

  """
  Whether the mutation succeeded. If the comment is not approved, the server
  will not return the comment to a non authenticated user, but a success message
  can be returned if the create succeeded, and the client can optimistically add
  the comment to the client cache
  """
  success: Boolean
}

"""
Input for the UpdateIssue mutation
"""
input UpdateIssueInput {
  """
  The slug that the issue will be an alias of
  """
  aliasOf: String
  clientMutationId: String!

  """
  The description of the issue object
  """
  description: String

  """
  The ID of the Issue object to update
  """
  id: ID!

  """
  The name of the issue object to mutate
  """
  name: String

  """
  The ID of the issue that should be set as the parent
  """
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the UpdateIssue mutation
"""
type UpdateIssuePayload {
  """
  The created issue
  """
  issue: Issue
  clientMutationId: String!
}

"""
Input for the updateMediaItem mutation
"""
input UpdateMediaItemInput {
  """
  Alternative text to display when mediaItem is not displayed
  """
  altText: String

  """
  The userId to assign as the author of the mediaItem
  """
  authorId: ID

  """
  The caption for the mediaItem
  """
  caption: String
  clientMutationId: String!

  """
  The comment status for the mediaItem
  """
  commentStatus: String

  """
  The date of the mediaItem
  """
  date: String

  """
  The date (in GMT zone) of the mediaItem
  """
  dateGmt: String

  """
  Description of the mediaItem
  """
  description: String

  """
  The file name of the mediaItem
  """
  filePath: String

  """
  The file type of the mediaItem
  """
  fileType: MimeTypeEnum

  """
  The ID of the mediaItem object
  """
  id: ID!

  """
  The WordPress post ID or the graphQL postId of the parent object
  """
  parentId: ID

  """
  The ping status for the mediaItem
  """
  pingStatus: String

  """
  The slug of the mediaItem
  """
  slug: String

  """
  The status of the mediaItem
  """
  status: MediaItemStatusEnum

  """
  The title of the mediaItem
  """
  title: String
}

"""
The payload for the updateMediaItem mutation
"""
type UpdateMediaItemPayload {
  clientMutationId: String!
  mediaItem: MediaItem
}

"""
Input for the updatePage mutation
"""
input UpdatePageInput {
  """
  The userId to assign as the author of the post
  """
  authorId: ID
  clientMutationId: String!

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """
  The comment status for the object
  """
  commentStatus: String

  """
  The content of the object
  """
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """
  The excerpt of the object
  """
  excerpt: String

  """
  The ID of the page object
  """
  id: ID!

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  If the post is an attachment or a media file, this field will carry the
  corresponding MIME type. This field is equivalent to the value of
  WP_Post->post_mime_type and the post_mime_type column in the "post_objects"
  database table.
  """
  mimeType: MimeTypeEnum

  """
  The ID of the parent object
  """
  parentId: ID

  """
  The password used to protect the content of the object
  """
  password: String

  """
  The ping status for the object
  """
  pingStatus: String

  """
  URLs that have been pinged.
  """
  pinged: [String]

  """
  The slug of the object
  """
  slug: String

  """
  The status of the object
  """
  status: PostStatusEnum

  """
  The title of the post
  """
  title: String

  """
  URLs queued to be pinged.
  """
  toPing: [String]
}

"""
The payload for the updatePage mutation
"""
type UpdatePagePayload {
  clientMutationId: String!
  page: Page
}

"""
Input for the updatePost mutation
"""
input UpdatePostInput {
  """
  Set connections between the post and Issues
  """
  issues: PostIssuesInput

  """
  Set connections between the post and SeriesN
  """
  seriesN: PostSeriesNInput

  """
  The userId to assign as the author of the post
  """
  authorId: ID

  """
  Set connections between the post and categories
  """
  categories: PostCategoriesInput
  clientMutationId: String!

  """
  The number of comments. Even though WPGraphQL denotes this field as an
  integer, in WordPress this field should be saved as a numeric string for compatibility.
  """
  commentCount: Int

  """
  The comment status for the object
  """
  commentStatus: String

  """
  The content of the object
  """
  content: String

  """
  The date of the object. Preferable to enter as year/month/day (e.g.
  01/31/2017) as it will rearrange date as fit if it is not specified.
  Incomplete dates may have unintended results for example, "2017" as the input
  will use current date with timestamp 20:17
  """
  date: String

  """
  The excerpt of the object
  """
  excerpt: String

  """
  The ID of the post object
  """
  id: ID!

  """
  A field used for ordering posts. This is typically used with nav menu items or
  for special ordering of hierarchical content types.
  """
  menuOrder: Int

  """
  If the post is an attachment or a media file, this field will carry the
  corresponding MIME type. This field is equivalent to the value of
  WP_Post->post_mime_type and the post_mime_type column in the "post_objects"
  database table.
  """
  mimeType: MimeTypeEnum

  """
  The ID of the parent object
  """
  parentId: ID

  """
  The password used to protect the content of the object
  """
  password: String

  """
  The ping status for the object
  """
  pingStatus: String

  """
  URLs that have been pinged.
  """
  pinged: [String]

  """
  The slug of the object
  """
  slug: String

  """
  The status of the object
  """
  status: PostStatusEnum

  """
  Set connections between the post and tags
  """
  tags: PostTagsInput

  """
  The title of the post
  """
  title: String

  """
  URLs queued to be pinged.
  """
  toPing: [String]
}

"""
The payload for the updatePost mutation
"""
type UpdatePostPayload {
  clientMutationId: String!
  post: Post
}

"""
Input for the UpdateSeries mutation
"""
input UpdateSeriesInput {
  """
  The slug that the series will be an alias of
  """
  aliasOf: String
  clientMutationId: String!

  """
  The description of the series object
  """
  description: String

  """
  The ID of the Series object to update
  """
  id: ID!

  """
  The name of the series object to mutate
  """
  name: String

  """
  The ID of the series that should be set as the parent
  """
  parentId: ID

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the UpdateSeries mutation
"""
type UpdateSeriesPayload {
  """
  The created series
  """
  series: Series
  clientMutationId: String!
}

"""
Input for the updateSettings mutation
"""
input UpdateSettingsInput {
  clientMutationId: String!

  """
  Allow people to submit comments on new posts.
  """
  discussionSettingsDefaultCommentStatus: String

  """
  Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
  """
  discussionSettingsDefaultPingStatus: String

  """
  A date format for all date strings.
  """
  generalSettingsDateFormat: String

  """
  Site tagline.
  """
  generalSettingsDescription: String

  """
  This address is used for admin purposes, like new user notification.
  """
  generalSettingsEmail: String

  """
  WordPress locale code.
  """
  generalSettingsLanguage: String

  """
  A day number of the week that the week should start on.
  """
  generalSettingsStartOfWeek: Int

  """
  A time format for all time strings.
  """
  generalSettingsTimeFormat: String

  """
  A city in the same timezone as you.
  """
  generalSettingsTimezone: String

  """
  Site title.
  """
  generalSettingsTitle: String

  """
  Site URL.
  """
  generalSettingsUrl: String

  """
  Blog pages show at most.
  """
  readingSettingsPostsPerPage: Int

  """
  Default post category.
  """
  writingSettingsDefaultCategory: Int

  """
  Default post format.
  """
  writingSettingsDefaultPostFormat: String

  """
  Convert emoticons like :-) and :-P to graphics on display.
  """
  writingSettingsUseSmilies: Boolean
}

"""
The payload for the updateSettings mutation
"""
type UpdateSettingsPayload {
  allSettings: Settings
  clientMutationId: String!
  discussionSettings: DiscussionSettings
  generalSettings: GeneralSettings
  readingSettings: ReadingSettings
  writingSettings: WritingSettings
}

"""
Input for the UpdateTag mutation
"""
input UpdateTagInput {
  """
  The slug that the post_tag will be an alias of
  """
  aliasOf: String
  clientMutationId: String!

  """
  The description of the post_tag object
  """
  description: String

  """
  The ID of the tag object to update
  """
  id: ID!

  """
  The name of the post_tag object to mutate
  """
  name: String

  """
  If this argument exists then the slug will be checked to see if it is not an
  existing valid term. If that check succeeds (it is not a valid term), then it
  is added and the term id is given. If it fails, then a check is made to
  whether the taxonomy is hierarchical and the parent argument is not empty. If
  the second check succeeds, the term will be inserted and the term id will be
  given. If the slug argument is empty, then it will be calculated from the term name.
  """
  slug: String
}

"""
The payload for the UpdateTag mutation
"""
type UpdateTagPayload {
  clientMutationId: String!

  """
  The created post_tag
  """
  tag: Tag
}

"""
Input for the updateUser mutation
"""
input UpdateUserInput {
  """
  User's AOL IM account.
  """
  aim: String
  clientMutationId: String!

  """
  A string containing content about the user.
  """
  description: String

  """
  A string that will be shown on the site. Defaults to user's username. It is
  likely that you will want to change this, for both appearance and security
  through obscurity (that is if you dont use and delete the default admin user).
  """
  displayName: String

  """
  A string containing the user's email address.
  """
  email: String

  """
  The user's first name.
  """
  firstName: String

  """
  The ID of the user
  """
  id: ID!

  """
  User's Jabber account.
  """
  jabber: String

  """
  The user's last name.
  """
  lastName: String

  """
  User's locale.
  """
  locale: String

  """
  A string that contains a URL-friendly name for the user. The default is the user's username.
  """
  nicename: String

  """
  The user's nickname, defaults to the user's username.
  """
  nickname: String

  """
  A string that contains the plain text password for the user.
  """
  password: String

  """
  The date the user registered. Format is Y-m-d H:i:s.
  """
  registered: String

  """
  A string for whether to enable the rich editor or not. False if not empty.
  """
  richEditing: String

  """
  An array of roles to be assigned to the user.
  """
  roles: [String]

  """
  A string containing the user's URL for the user's web site.
  """
  websiteUrl: String

  """
  User's Yahoo IM account.
  """
  yim: String
}

"""
The payload for the updateUser mutation
"""
type UpdateUserPayload {
  clientMutationId: String!
  user: User
}

"""
A User object
"""
type User implements Node {
  """
  Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
  """
  avatar(
    """
    The size attribute of the avatar field can be used to fetch avatars of
    different sizes. The value corresponds to the dimension in pixels to fetch.
    The default is 96 pixels.
    """
    size: Int = 96

    """
    Whether to always show the default image, never the Gravatar. Default false
    """
    forceDefault: Boolean
    rating: AvatarRatingEnum
  ): Avatar

  """
  User metadata option name. Usually it will be &quot;wp_capabilities&quot;.
  """
  capKey: String

  """
  This field is the id of the user. The id of the user matches WP_User-&gt;ID
  field and the value in the ID column for the &quot;users&quot; table in SQL.
  """
  capabilities: [String]

  """
  Connection between the User type and the User type
  """
  comments(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: UserToCommentConnectionWhereArgs
  ): UserToCommentConnection

  """
  Description of the user.
  """
  description: String

  """
  Email of the user. This is equivalent to the WP_User-&gt;user_email property.
  """
  email: String

  """
  A complete list of capabilities including capabilities inherited from a role.
  This is equivalent to the array keys of WP_User-&gt;allcaps.
  """
  extraCapabilities: [String]

  """
  First name of the user. This is equivalent to the WP_User-&gt;user_first_name property.
  """
  firstName: String

  """
  The globally unique identifier for the user
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property.
  """
  lastName: String

  """
  The preferred language locale set for the user. Value derived from get_user_locale().
  """
  locale: String

  """
  Connection between the User type and the User type
  """
  mediaItems(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: UserToMediaItemConnectionWhereArgs
  ): UserToMediaItemConnection

  """
  Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property.
  """
  name: String

  """
  The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  nicename: String

  """
  Nickname of the user.
  """
  nickname: String

  """
  Connection between the User type and the User type
  """
  pages(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: UserToPageConnectionWhereArgs
  ): UserToPageConnection

  """
  Connection between the User type and the User type
  """
  posts(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: UserToPostConnectionWhereArgs
  ): UserToPostConnection

  """
  The date the user registered or was created. The field follows a full ISO8601 date string format.
  """
  registeredDate: String

  """
  Connection between the User type and the User type
  """
  revisions(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String

    """
    Arguments for filtering the connection
    """
    where: UserToRevisionConnectionWhereArgs
  ): UserToRevisionConnection

  """
  Connection between the User type and the User type
  """
  roles(
    """
    The number of items to return after the referenced "after" cursor
    """
    first: Int
    last: Int

    """
    Cursor used along with the "first" argument to reference where in the dataset to get data
    """
    after: String

    """
    Cursor used along with the "last" argument to reference where in the dataset to get data
    """
    before: String
  ): UserToUserRoleConnection

  """
  The slug for the user. This field is equivalent to WP_User-&gt;user_nicename
  """
  slug: String

  """
  A website url that is associated with the user.
  """
  url: String

  """
  The Id of the user. Equivalent to WP_User-&gt;ID
  """
  userId: Int

  """
  Username for the user. This field is equivalent to WP_User-&gt;user_login.
  """
  username: String
}

"""
A user role object
"""
type UserRole {
  """
  The capabilities that belong to this role
  """
  capabilities: [String]

  """
  The globally unique identifier for the role
  """
  id: ID!

  """
  Whether the object is restricted from the current viewer
  """
  isRestricted: Boolean

  """
  The UI friendly name of the role
  """
  name: String
}

"""
Names of available user roles
"""
enum UserRoleEnum {
  ADMINISTRATOR
  AUTHOR
  CONTRIBUTOR
  EDITOR
  SUBSCRIBER
}

"""
Field to order the connection by
"""
enum UsersConnectionOrderbyEnum {
  """
  Order by display name
  """
  DISPLAY_NAME

  """
  Order by email address
  """
  EMAIL

  """
  Order by login
  """
  LOGIN

  """
  Preserve the login order given in the LOGIN_IN array
  """
  LOGIN_IN

  """
  Order by nice name
  """
  NICE_NAME

  """
  Preserve the nice name order given in the NICE_NAME_IN array
  """
  NICE_NAME_IN

  """
  Order by registration date
  """
  REGISTERED

  """
  Order by URL
  """
  URL
}

"""
Options for ordering the connection
"""
input UsersConnectionOrderbyInput {
  field: UsersConnectionOrderbyEnum!
  order: OrderEnum
}

"""
Connection between the User type and the User type
"""
type UserToCommentConnection {
  """
  Edges for the UserToCommentConnection connection
  """
  edges: [UserToCommentConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Comment]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type UserToCommentConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Comment
}

"""
Arguments for filtering the UserToCommentConnection connection
"""
input UserToCommentConnectionWhereArgs {
  """
  Comment author email address.
  """
  authorEmail: String

  """
  Array of author IDs to include comments for.
  """
  authorIn: [ID]

  """
  Array of author IDs to exclude comments for.
  """
  authorNotIn: [ID]

  """
  Comment author URL.
  """
  authorUrl: String

  """
  Array of comment IDs to include.
  """
  commentIn: [ID]

  """
  Array of IDs of users whose unapproved comments will be returned by the
  							query regardless of status.
  """
  commentNotIn: [ID]

  """
  Include comments of a given type.
  """
  commentType: String

  """
  Include comments from a given array of comment types.
  """
  commentTypeIn: [String]

  """
  Exclude comments from a given array of comment types.
  """
  commentTypeNotIn: String

  """
  Content object author ID to limit results by.
  """
  contentAuthor: [ID]

  """
  Array of author IDs to retrieve comments for.
  """
  contentAuthorIn: [ID]

  """
  Array of author IDs *not* to retrieve comments for.
  """
  contentAuthorNotIn: [ID]

  """
  Limit results to those affiliated with a given content object
  							ID.
  """
  contentId: ID

  """
  Array of content object IDs to include affiliated comments
  							for.
  """
  contentIdIn: [ID]

  """
  Array of content object IDs to exclude affiliated comments
  							for.
  """
  contentIdNotIn: [ID]

  """
  Content object name to retrieve affiliated comments for.
  """
  contentName: String

  """
  Content Object parent ID to retrieve affiliated comments for.
  """
  contentParent: Int

  """
  Array of content object statuses to retrieve affiliated comments for.
  							Pass 'any' to match any value.
  """
  contentStatus: [PostStatusEnum]

  """
  Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value.
  """
  contentType: [PostTypeEnum]

  """
  Array of IDs or email addresses of users whose unapproved comments will be
  returned by the query regardless of $status. Default empty
  """
  includeUnapproved: [ID]

  """
  Karma score to retrieve matching comments for.
  """
  karma: Int

  """
  The cardinality of the order of the connection
  """
  order: OrderEnum

  """
  Field to order the comments by.
  """
  orderby: CommentsConnectionOrderbyEnum

  """
  Parent ID of comment to retrieve children of.
  """
  parent: Int

  """
  Array of parent IDs of comments to retrieve children for.
  """
  parentIn: [ID]

  """
  Array of parent IDs of comments *not* to retrieve children
  							for.
  """
  parentNotIn: [ID]

  """
  Search term(s) to retrieve matching comments for.
  """
  search: String

  """
  Comment status to limit results by.
  """
  status: String

  """
  Include comments for a specific user ID.
  """
  userId: ID
}

"""
Connection between the User type and the User type
"""
type UserToMediaItemConnection {
  """
  Edges for the UserToMediaItemConnection connection
  """
  edges: [UserToMediaItemConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [MediaItem]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type UserToMediaItemConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: MediaItem
}

"""
Arguments for filtering the UserToMediaItemConnection connection
"""
input UserToMediaItemConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the User type and the User type
"""
type UserToPageConnection {
  """
  Edges for the UserToPageConnection connection
  """
  edges: [UserToPageConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Page]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type UserToPageConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Page
}

"""
Arguments for filtering the UserToPageConnection connection
"""
input UserToPageConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the User type and the User type
"""
type UserToPostConnection {
  """
  Edges for the UserToPostConnection connection
  """
  edges: [UserToPostConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Post]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type UserToPostConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Post
}

"""
Arguments for filtering the UserToPostConnection connection
"""
input UserToPostConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String
  stati: [PostStatusEnum]
  status: PostStatusEnum

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the User type and the User type
"""
type UserToRevisionConnection {
  """
  Edges for the UserToRevisionConnection connection
  """
  edges: [UserToRevisionConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [Revision]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo

  """
  Information about the type of content being queried
  """
  postTypeInfo: PostType
}

"""
An edge in a connection
"""
type UserToRevisionConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: Revision
}

"""
Arguments for filtering the UserToRevisionConnection connection
"""
input UserToRevisionConnectionWhereArgs {
  """
  The user that's connected as the author of the object. Use the
  							userId for the author object.
  """
  author: Int

  """
  Find objects connected to author(s) in the array of author's userIds
  """
  authorIn: [ID]

  """
  Find objects connected to the author by the author's nicename
  """
  authorName: String

  """
  Find objects NOT connected to author(s) in the array of author's
  							userIds
  """
  authorNotIn: [ID]

  """
  Category ID
  """
  categoryId: Int

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryIn: [ID]

  """
  Use Category Slug
  """
  categoryName: String

  """
  Array of category IDs, used to display objects from one
  										category OR another
  """
  categoryNotIn: [ID]

  """
  Filter the connection based on dates
  """
  dateQuery: DateQueryInput

  """
  True for objects with passwords; False for objects without passwords;
  							null for all objects with or without passwords
  """
  hasPassword: Boolean

  """
  Specific ID of the object
  """
  id: Int

  """
  Array of IDs for the objects to retrieve
  """
  in: [ID]

  """
  Get objects with a specific mimeType property
  """
  mimeType: MimeTypeEnum

  """
  Slug / post_name of the object
  """
  name: String

  """
  Specify objects to retrieve. Use slugs
  """
  nameIn: [String]

  """
  Specify IDs NOT to retrieve. If this is used in the same query as "in",
  							it will be ignored
  """
  notIn: [ID]

  """
  What paramater to use to order the objects by.
  """
  orderby: [PostObjectsConnectionOrderbyInput]

  """
  Use ID to return only children. Use 0 to return only top-level
  							items
  """
  parent: String

  """
  Specify objects whose parent is in an array
  """
  parentIn: [ID]

  """
  Specify posts whose parent is not in an array
  """
  parentNotIn: [ID]

  """
  Show posts with a specific password.
  """
  password: String

  """
  Show Posts based on a keyword search
  """
  search: String

  """
  Tag Slug
  """
  tag: String

  """
  Use Tag ID
  """
  tagId: String

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagIn: [ID]

  """
  Array of tag IDs, used to display objects from one tag OR
  							another
  """
  tagNotIn: [ID]

  """
  Array of tag slugs, used to display objects from one tag OR
  							another
  """
  tagSlugAnd: [String]

  """
  Array of tag slugs, used to exclude objects in specified
  							tags
  """
  tagSlugIn: [String]

  """
  Title of the object
  """
  title: String
}

"""
Connection between the User type and the User type
"""
type UserToUserRoleConnection {
  """
  Edges for the UserToUserRoleConnection connection
  """
  edges: [UserToUserRoleConnectionEdge]

  """
  The nodes of the connection, without the edges
  """
  nodes: [UserRole]

  """
  Information about pagination in a connection.
  """
  pageInfo: WPPageInfo
}

"""
An edge in a connection
"""
type UserToUserRoleConnectionEdge {
  """
  A cursor for use in pagination
  """
  cursor: String

  """
  The item at the end of the edge
  """
  node: UserRole
}

"""
Information about pagination in a connection.
"""
type WPPageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String

  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!

  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
The writing setting type
"""
type WritingSettings {
  """
  Default post category.
  """
  defaultCategory: Int

  """
  Default post format.
  """
  defaultPostFormat: String

  """
  Convert emoticons like :-) and :-P to graphics on display.
  """
  useSmilies: Boolean
}
